
/Users/gakushihanazono/src/github.com/njl7502l/blink/build/teensy.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	4281      	cmp	r1, r0
60001402:	d005      	beq.n	60001410 <memory_copy+0x10>
60001404:	f851 3b04 	ldr.w	r3, [r1], #4
60001408:	f840 3b04 	str.w	r3, [r0], #4
6000140c:	4282      	cmp	r2, r0
6000140e:	d8f9      	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	4770      	bx	lr
60001412:	bf00      	nop

60001414 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001414:	4a04      	ldr	r2, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x14>)
60001416:	4905      	ldr	r1, [pc, #20]	; (6000142c <memory_clear.constprop.0+0x18>)
60001418:	f04f 0300 	mov.w	r3, #0
6000141c:	f842 3b04 	str.w	r3, [r2], #4
60001420:	4291      	cmp	r1, r2
60001422:	d8fb      	bhi.n	6000141c <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001424:	4770      	bx	lr
60001426:	bf00      	nop
60001428:	20000ec0 	.word	0x20000ec0
6000142c:	200012e0 	.word	0x200012e0

60001430 <ResetHandler2>:
{
60001430:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	__asm__ volatile("dsb":::"memory");
60001434:	f3bf 8f4f 	dsb	sy
	asm volatile("nop");
60001438:	bf00      	nop
	asm volatile("nop");
6000143a:	bf00      	nop
	asm volatile("nop");
6000143c:	bf00      	nop
	asm volatile("nop");
6000143e:	bf00      	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001440:	f000 f918 	bl	60001674 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001444:	4b68      	ldr	r3, [pc, #416]	; (600015e8 <ResetHandler2+0x1b8>)
60001446:	2208      	movs	r2, #8
60001448:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
6000144c:	bf00      	nop
	asm volatile("nop");
6000144e:	bf00      	nop
	asm volatile("nop");
60001450:	bf00      	nop
	asm volatile("nop");
60001452:	bf00      	nop
	asm volatile("nop");
60001454:	bf00      	nop
	asm volatile("nop");
60001456:	bf00      	nop
	asm volatile("nop");
60001458:	bf00      	nop
	asm volatile("nop");
6000145a:	bf00      	nop
	asm volatile("nop");
6000145c:	bf00      	nop
	asm volatile("nop");
6000145e:	bf00      	nop
	asm volatile("nop");
60001460:	bf00      	nop
	asm volatile("nop");
60001462:	bf00      	nop
	asm volatile("nop");
60001464:	bf00      	nop
	asm volatile("nop");
60001466:	bf00      	nop
	asm volatile("nop");
60001468:	bf00      	nop
	asm volatile("nop");
6000146a:	bf00      	nop
	memory_copy(&_stext, &_stextload, &_etext);
6000146c:	4a5f      	ldr	r2, [pc, #380]	; (600015ec <ResetHandler2+0x1bc>)
6000146e:	4960      	ldr	r1, [pc, #384]	; (600015f0 <ResetHandler2+0x1c0>)
60001470:	4860      	ldr	r0, [pc, #384]	; (600015f4 <ResetHandler2+0x1c4>)
60001472:	f7ff ffc5 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001476:	4a60      	ldr	r2, [pc, #384]	; (600015f8 <ResetHandler2+0x1c8>)
60001478:	4960      	ldr	r1, [pc, #384]	; (600015fc <ResetHandler2+0x1cc>)
6000147a:	4861      	ldr	r0, [pc, #388]	; (60001600 <ResetHandler2+0x1d0>)
6000147c:	f7ff ffc0 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001480:	4c60      	ldr	r4, [pc, #384]	; (60001604 <ResetHandler2+0x1d4>)
60001482:	f7ff ffc7 	bl	60001414 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001486:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
6000148a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148e:	2300      	movs	r3, #0
60001490:	4a5d      	ldr	r2, [pc, #372]	; (60001608 <ResetHandler2+0x1d8>)
	SCB_CPACR = 0x00F00000;
60001492:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001496:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000149a:	3301      	adds	r3, #1
6000149c:	2bb0      	cmp	r3, #176	; 0xb0
6000149e:	d1fa      	bne.n	60001496 <ResetHandler2+0x66>
600014a0:	4b5a      	ldr	r3, [pc, #360]	; (6000160c <ResetHandler2+0x1dc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600014a2:	2180      	movs	r1, #128	; 0x80
600014a4:	4a5a      	ldr	r2, [pc, #360]	; (60001610 <ResetHandler2+0x1e0>)
600014a6:	f803 1b01 	strb.w	r1, [r3], #1
600014aa:	4293      	cmp	r3, r2
600014ac:	d1fb      	bne.n	600014a6 <ResetHandler2+0x76>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b2:	4e4d      	ldr	r6, [pc, #308]	; (600015e8 <ResetHandler2+0x1b8>)
600014b4:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b8:	f8df b184 	ldr.w	fp, [pc, #388]	; 60001640 <ResetHandler2+0x210>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8df a184 	ldr.w	sl, [pc, #388]	; 60001644 <ResetHandler2+0x214>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	SCB_VTOR = (uint32_t)_VectorsRam;
600014c4:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014c8:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ca:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ce:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014d2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014d6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014da:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	f8df 8168 	ldr.w	r8, [pc, #360]	; 60001648 <ResetHandler2+0x218>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e6:	4a4b      	ldr	r2, [pc, #300]	; (60001614 <ResetHandler2+0x1e4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014fc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
60001500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001508:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000150c:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000150e:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001510:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001512:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001514:	f000 f8b6 	bl	60001684 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001518:	4b3f      	ldr	r3, [pc, #252]	; (60001618 <ResetHandler2+0x1e8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000151a:	4940      	ldr	r1, [pc, #256]	; (6000161c <ResetHandler2+0x1ec>)
	_VectorsRam[14] = pendablesrvreq_isr;
6000151c:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000151e:	4b40      	ldr	r3, [pc, #256]	; (60001620 <ResetHandler2+0x1f0>)
60001520:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001522:	2363      	movs	r3, #99	; 0x63
60001524:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001526:	2303      	movs	r3, #3
	SYST_CVR = 0;
60001528:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000152a:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000152c:	4b3d      	ldr	r3, [pc, #244]	; (60001624 <ResetHandler2+0x1f4>)
6000152e:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001532:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000153a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000153e:	4b3a      	ldr	r3, [pc, #232]	; (60001628 <ResetHandler2+0x1f8>)
60001540:	681a      	ldr	r2, [r3, #0]
60001542:	f042 0201 	orr.w	r2, r2, #1
60001546:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001548:	685b      	ldr	r3, [r3, #4]
6000154a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000154c:	f000 fae4 	bl	60001b18 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001550:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001554:	4835      	ldr	r0, [pc, #212]	; (6000162c <ResetHandler2+0x1fc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001556:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000155a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000155e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001562:	f000 fc89 	bl	60001e78 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001566:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000156a:	4b31      	ldr	r3, [pc, #196]	; (60001630 <ResetHandler2+0x200>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000156c:	4a31      	ldr	r2, [pc, #196]	; (60001634 <ResetHandler2+0x204>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000156e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001572:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001576:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001578:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000157c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001580:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001584:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001588:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000158a:	07db      	lsls	r3, r3, #31
6000158c:	d408      	bmi.n	600015a0 <ResetHandler2+0x170>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000158e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001592:	4929      	ldr	r1, [pc, #164]	; (60001638 <ResetHandler2+0x208>)
60001594:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001596:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001598:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000159a:	f043 0301 	orr.w	r3, r3, #1
6000159e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600015a0:	4a24      	ldr	r2, [pc, #144]	; (60001634 <ResetHandler2+0x204>)
600015a2:	4c26      	ldr	r4, [pc, #152]	; (6000163c <ResetHandler2+0x20c>)
600015a4:	6893      	ldr	r3, [r2, #8]
600015a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600015aa:	6093      	str	r3, [r2, #8]
	configure_external_ram();
600015ac:	f000 f8f2 	bl	60001794 <configure_external_ram>
	analog_init();
600015b0:	f000 fc16 	bl	60001de0 <analog_init>
	pwm_init();
600015b4:	f000 fc58 	bl	60001e68 <__pwm_init_veneer>
	tempmon_init();
600015b8:	f000 fadc 	bl	60001b74 <tempmon_init>
	startup_middle_hook();
600015bc:	f000 f85c 	bl	60001678 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015c0:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c2:	2b13      	cmp	r3, #19
600015c4:	d9fc      	bls.n	600015c0 <ResetHandler2+0x190>
	usb_init();
600015c6:	f000 fb6d 	bl	60001ca4 <usb_init>
600015ca:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015d0:	d3fb      	bcc.n	600015ca <ResetHandler2+0x19a>
	startup_debug_reset();
600015d2:	f000 f855 	bl	60001680 <startup_debug_reset>
	startup_late_hook();
600015d6:	f000 f851 	bl	6000167c <startup_default_late_hook>
	__libc_init_array();
600015da:	f000 fc31 	bl	60001e40 <____libc_init_array_veneer>
	main();
600015de:	f000 fc33 	bl	60001e48 <__main_veneer>
	while (1) asm("WFI");
600015e2:	bf30      	wfi
600015e4:	e7fd      	b.n	600015e2 <ResetHandler2+0x1b2>
600015e6:	bf00      	nop
600015e8:	400d8000 	.word	0x400d8000
600015ec:	00001940 	.word	0x00001940
600015f0:	60001f8c 	.word	0x60001f8c
600015f4:	00000000 	.word	0x00000000
600015f8:	20000ec0 	.word	0x20000ec0
600015fc:	600038d0 	.word	0x600038d0
60001600:	20000000 	.word	0x20000000
60001604:	20000c00 	.word	0x20000c00
60001608:	00000215 	.word	0x00000215
6000160c:	e000e400 	.word	0xe000e400
60001610:	e000e4a0 	.word	0xe000e4a0
60001614:	400ac000 	.word	0x400ac000
60001618:	00001129 	.word	0x00001129
6000161c:	20001274 	.word	0x20001274
60001620:	0000112d 	.word	0x0000112d
60001624:	20200000 	.word	0x20200000
60001628:	e0001000 	.word	0xe0001000
6000162c:	23c34600 	.word	0x23c34600
60001630:	40084000 	.word	0x40084000
60001634:	400d4000 	.word	0x400d4000
60001638:	56c00000 	.word	0x56c00000
6000163c:	20001278 	.word	0x20001278
60001640:	2018101b 	.word	0x2018101b
60001644:	13110d0c 	.word	0x13110d0c
60001648:	400fc000 	.word	0x400fc000

6000164c <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000164c:	4b05      	ldr	r3, [pc, #20]	; (60001664 <ResetHandler+0x18>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000164e:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001652:	4a05      	ldr	r2, [pc, #20]	; (60001668 <ResetHandler+0x1c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001654:	4805      	ldr	r0, [pc, #20]	; (6000166c <ResetHandler+0x20>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001656:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001658:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165a:	4a05      	ldr	r2, [pc, #20]	; (60001670 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000165c:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165e:	4695      	mov	sp, r2
	ResetHandler2();
60001660:	f7ff fee6 	bl	60001430 <ResetHandler2>
60001664:	400ac000 	.word	0x400ac000
60001668:	aaaaaaab 	.word	0xaaaaaaab
6000166c:	00200007 	.word	0x00200007
60001670:	20078000 	.word	0x20078000

60001674 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001674:	4770      	bx	lr
60001676:	bf00      	nop

60001678 <startup_default_middle_hook>:
60001678:	4770      	bx	lr
6000167a:	bf00      	nop

6000167c <startup_default_late_hook>:
6000167c:	4770      	bx	lr
6000167e:	bf00      	nop

60001680 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
60001680:	bf00      	nop
60001682:	4770      	bx	lr

60001684 <configure_cache>:
{
60001684:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001686:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
6000168a:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000168c:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000168e:	4831      	ldr	r0, [pc, #196]	; (60001754 <configure_cache+0xd0>)
	SCB_MPU_CTRL = 0; // turn off MPU
60001690:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001694:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001698:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000169a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
6000169e:	482e      	ldr	r0, [pc, #184]	; (60001758 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600016a0:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016a4:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
600016a6:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016aa:	482c      	ldr	r0, [pc, #176]	; (6000175c <configure_cache+0xd8>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016ac:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016b0:	4a2b      	ldr	r2, [pc, #172]	; (60001760 <configure_cache+0xdc>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016b2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600016b6:	4c2b      	ldr	r4, [pc, #172]	; (60001764 <configure_cache+0xe0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016b8:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016bc:	482a      	ldr	r0, [pc, #168]	; (60001768 <configure_cache+0xe4>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600016be:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016c2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016c6:	4c29      	ldr	r4, [pc, #164]	; (6000176c <configure_cache+0xe8>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016c8:	4829      	ldr	r0, [pc, #164]	; (60001770 <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016ca:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016ce:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016d2:	4c28      	ldr	r4, [pc, #160]	; (60001774 <configure_cache+0xf0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016d4:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016d8:	4827      	ldr	r0, [pc, #156]	; (60001778 <configure_cache+0xf4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016da:	4a28      	ldr	r2, [pc, #160]	; (6000177c <configure_cache+0xf8>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016dc:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016e0:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016e4:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016e8:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016ec:	4c24      	ldr	r4, [pc, #144]	; (60001780 <configure_cache+0xfc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016ee:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016f0:	4824      	ldr	r0, [pc, #144]	; (60001784 <configure_cache+0x100>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016f2:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016f6:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600016fa:	4a23      	ldr	r2, [pc, #140]	; (60001788 <configure_cache+0x104>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016fc:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001700:	4c22      	ldr	r4, [pc, #136]	; (6000178c <configure_cache+0x108>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001702:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001706:	f102 6240 	add.w	r2, r2, #201326592	; 0xc000000
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000170a:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
6000170e:	4820      	ldr	r0, [pc, #128]	; (60001790 <configure_cache+0x10c>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001710:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001714:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60001716:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
6000171a:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
6000171e:	bf00      	nop
	asm("nop");
60001720:	bf00      	nop
	asm("nop");
60001722:	bf00      	nop
	asm("nop");
60001724:	bf00      	nop
	asm("nop");
60001726:	bf00      	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001728:	2201      	movs	r2, #1
6000172a:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
6000172e:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001732:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001736:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
6000173a:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000173e:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001742:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
60001746:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000174a:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
6000174e:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
60001752:	4770      	bx	lr
60001754:	1000003f 	.word	0x1000003f
60001758:	07080025 	.word	0x07080025
6000175c:	00100009 	.word	0x00100009
60001760:	200012e0 	.word	0x200012e0
60001764:	00200013 	.word	0x00200013
60001768:	07020021 	.word	0x07020021
6000176c:	20000014 	.word	0x20000014
60001770:	13080025 	.word	0x13080025
60001774:	10000009 	.word	0x10000009
60001778:	20200016 	.word	0x20200016
6000177c:	130b0027 	.word	0x130b0027
60001780:	40000017 	.word	0x40000017
60001784:	60000018 	.word	0x60000018
60001788:	070b002f 	.word	0x070b002f
6000178c:	70000019 	.word	0x70000019
60001790:	8000001a 	.word	0x8000001a

60001794 <configure_external_ram>:
{
60001794:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001796:	4bb8      	ldr	r3, [pc, #736]	; (60001a78 <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001798:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000179a:	4eb8      	ldr	r6, [pc, #736]	; (60001a7c <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000179c:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
6000179e:	4fb8      	ldr	r7, [pc, #736]	; (60001a80 <configure_external_ram+0x2ec>)
{
600017a0:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600017a2:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017a6:	49b7      	ldr	r1, [pc, #732]	; (60001a84 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600017a8:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017ac:	4db6      	ldr	r5, [pc, #728]	; (60001a88 <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600017ae:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600017b2:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017b6:	4cb5      	ldr	r4, [pc, #724]	; (60001a8c <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600017b8:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017bc:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017c0:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017c4:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017c8:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600017cc:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600017d0:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
600017d2:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
600017d4:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
600017d6:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600017d8:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600017da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600017de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600017e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017e6:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017ea:	4aa9      	ldr	r2, [pc, #676]	; (60001a90 <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
600017ec:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
600017f0:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
600017f4:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
600017f8:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
600017fc:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001800:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001802:	4ba4      	ldr	r3, [pc, #656]	; (60001a94 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001804:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001806:	48a4      	ldr	r0, [pc, #656]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001808:	49a4      	ldr	r1, [pc, #656]	; (60001a9c <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
6000180a:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000180c:	4aa4      	ldr	r2, [pc, #656]	; (60001aa0 <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000180e:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001810:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
60001814:	f043 030c 	orr.w	r3, r3, #12
60001818:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000181c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001820:	6803      	ldr	r3, [r0, #0]
60001822:	f043 0302 	orr.w	r3, r3, #2
60001826:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001828:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000182a:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
6000182c:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001830:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001832:	4b9c      	ldr	r3, [pc, #624]	; (60001aa4 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001834:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001836:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001838:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000183a:	4c9b      	ldr	r4, [pc, #620]	; (60001aa8 <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000183c:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000183e:	4a9b      	ldr	r2, [pc, #620]	; (60001aac <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001840:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001844:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60001846:	68c3      	ldr	r3, [r0, #12]
60001848:	f023 0378 	bic.w	r3, r3, #120	; 0x78
6000184c:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000184e:	6a03      	ldr	r3, [r0, #32]
60001850:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001852:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001854:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001856:	6a03      	ldr	r3, [r0, #32]
60001858:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000185a:	4a95      	ldr	r2, [pc, #596]	; (60001ab0 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000185c:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000185e:	4c95      	ldr	r4, [pc, #596]	; (60001ab4 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001860:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001862:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60001864:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
60001866:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001868:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
6000186c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60001870:	f043 0301 	orr.w	r3, r3, #1
60001874:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001878:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
6000187c:	498e      	ldr	r1, [pc, #568]	; (60001ab8 <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
6000187e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60001882:	f043 0301 	orr.w	r3, r3, #1
60001886:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000188a:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
6000188e:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001890:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001892:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001894:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001898:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000189a:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
6000189c:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000189e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600018a2:	6803      	ldr	r3, [r0, #0]
600018a4:	f023 0302 	bic.w	r3, r3, #2
600018a8:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018aa:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018ac:	4b83      	ldr	r3, [pc, #524]	; (60001abc <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
600018ae:	4984      	ldr	r1, [pc, #528]	; (60001ac0 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018b0:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
600018b2:	f843 2b04 	str.w	r2, [r3], #4
600018b6:	428b      	cmp	r3, r1
600018b8:	d1fb      	bne.n	600018b2 <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600018ba:	4a77      	ldr	r2, [pc, #476]	; (60001a98 <configure_external_ram+0x304>)
600018bc:	6813      	ldr	r3, [r2, #0]
600018be:	f043 0301 	orr.w	r3, r3, #1
600018c2:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600018c4:	6813      	ldr	r3, [r2, #0]
600018c6:	f013 0301 	ands.w	r3, r3, #1
600018ca:	d1fb      	bne.n	600018c4 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018cc:	487a      	ldr	r0, [pc, #488]	; (60001ab8 <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018ce:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600018d0:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018d4:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600018d6:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018da:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600018dc:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600018e0:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600018e4:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600018e8:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600018ec:	4975      	ldr	r1, [pc, #468]	; (60001ac4 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600018ee:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600018f2:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600018f6:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600018fa:	4873      	ldr	r0, [pc, #460]	; (60001ac8 <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600018fc:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001900:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001904:	4c71      	ldr	r4, [pc, #452]	; (60001acc <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001906:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000190a:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
6000190e:	4970      	ldr	r1, [pc, #448]	; (60001ad0 <configure_external_ram+0x33c>)
60001910:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001914:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001916:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000191a:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000191e:	485e      	ldr	r0, [pc, #376]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001920:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001924:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001928:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000192c:	6943      	ldr	r3, [r0, #20]
6000192e:	07da      	lsls	r2, r3, #31
60001930:	d5fc      	bpl.n	6000192c <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001932:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001934:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001936:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000193a:	4957      	ldr	r1, [pc, #348]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000193c:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
6000193e:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001942:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001946:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000194a:	694b      	ldr	r3, [r1, #20]
6000194c:	07db      	lsls	r3, r3, #31
6000194e:	d5fc      	bpl.n	6000194a <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001950:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001952:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001954:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001958:	4a4f      	ldr	r2, [pc, #316]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000195a:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
6000195c:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001960:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001964:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001968:	6953      	ldr	r3, [r2, #20]
6000196a:	07df      	lsls	r7, r3, #31
6000196c:	d5fc      	bpl.n	60001968 <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000196e:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001970:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001972:	4858      	ldr	r0, [pc, #352]	; (60001ad4 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001974:	4948      	ldr	r1, [pc, #288]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001976:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001978:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000197c:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001980:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001984:	694b      	ldr	r3, [r1, #20]
60001986:	07de      	lsls	r6, r3, #31
60001988:	d5fc      	bpl.n	60001984 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
6000198a:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
6000198e:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001992:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001994:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001996:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001998:	4293      	cmp	r3, r2
6000199a:	d165      	bne.n	60001a68 <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
6000199c:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000199e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019a2:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019a4:	483c      	ldr	r0, [pc, #240]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
600019a6:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019aa:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019ae:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019b2:	6943      	ldr	r3, [r0, #20]
600019b4:	07dd      	lsls	r5, r3, #31
600019b6:	d5fc      	bpl.n	600019b2 <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019b8:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019ba:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019be:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019c0:	4a35      	ldr	r2, [pc, #212]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019c2:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
600019c4:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019c8:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019cc:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019d0:	6953      	ldr	r3, [r2, #20]
600019d2:	07dc      	lsls	r4, r3, #31
600019d4:	d5fc      	bpl.n	600019d0 <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019d6:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019d8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019dc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019e0:	492d      	ldr	r1, [pc, #180]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019e2:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600019e4:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019e8:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019ec:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019f0:	694b      	ldr	r3, [r1, #20]
600019f2:	07d8      	lsls	r0, r3, #31
600019f4:	d5fc      	bpl.n	600019f0 <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019f6:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019f8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019fc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a00:	4a25      	ldr	r2, [pc, #148]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a02:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001a04:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a08:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a0c:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a10:	6953      	ldr	r3, [r2, #20]
60001a12:	07d9      	lsls	r1, r3, #31
60001a14:	d5fc      	bpl.n	60001a10 <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a16:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a18:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a1c:	482d      	ldr	r0, [pc, #180]	; (60001ad4 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a1e:	491e      	ldr	r1, [pc, #120]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a20:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001a22:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a26:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a2a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a2e:	694b      	ldr	r3, [r1, #20]
60001a30:	07da      	lsls	r2, r3, #31
60001a32:	d5fc      	bpl.n	60001a2e <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
60001a34:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a38:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a3c:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001a3e:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a40:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a42:	4293      	cmp	r3, r2
60001a44:	d050      	beq.n	60001ae8 <configure_external_ram+0x354>
60001a46:	2508      	movs	r5, #8
60001a48:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60001a4c:	4922      	ldr	r1, [pc, #136]	; (60001ad8 <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a4e:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
60001a50:	4b22      	ldr	r3, [pc, #136]	; (60001adc <configure_external_ram+0x348>)
			external_psram_size = 16;
60001a52:	4a23      	ldr	r2, [pc, #140]	; (60001ae0 <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a54:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
60001a56:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60001a58:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a5a:	2301      	movs	r3, #1
60001a5c:	4821      	ldr	r0, [pc, #132]	; (60001ae4 <configure_external_ram+0x350>)
60001a5e:	4422      	add	r2, r4
60001a60:	f000 f9f6 	bl	60001e50 <__sm_set_pool_veneer>
}
60001a64:	b003      	add	sp, #12
60001a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001a68:	4b1e      	ldr	r3, [pc, #120]	; (60001ae4 <configure_external_ram+0x350>)
60001a6a:	2200      	movs	r2, #0
60001a6c:	e9c3 2200 	strd	r2, r2, [r3]
60001a70:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60001a74:	b003      	add	sp, #12
60001a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001a78:	401f8000 	.word	0x401f8000
60001a7c:	0001b0f9 	.word	0x0001b0f9
60001a80:	000110f9 	.word	0x000110f9
60001a84:	401f8400 	.word	0x401f8400
60001a88:	000170f9 	.word	0x000170f9
60001a8c:	400fc000 	.word	0x400fc000
60001a90:	1ffffcff 	.word	0x1ffffcff
60001a94:	a0000300 	.word	0xa0000300
60001a98:	402a4000 	.word	0x402a4000
60001a9c:	402a8000 	.word	0x402a8000
60001aa0:	ffff0012 	.word	0xffff0012
60001aa4:	00f737ff 	.word	0x00f737ff
60001aa8:	80000040 	.word	0x80000040
60001aac:	7cf0ff00 	.word	0x7cf0ff00
60001ab0:	830f00ff 	.word	0x830f00ff
60001ab4:	00020063 	.word	0x00020063
60001ab8:	5af05af0 	.word	0x5af05af0
60001abc:	402a4200 	.word	0x402a4200
60001ac0:	402a4300 	.word	0x402a4300
60001ac4:	3018049f 	.word	0x3018049f
60001ac8:	0a1806eb 	.word	0x0a1806eb
60001acc:	0a180638 	.word	0x0a180638
60001ad0:	26013206 	.word	0x26013206
60001ad4:	00030004 	.word	0x00030004
60001ad8:	70000000 	.word	0x70000000
60001adc:	70000000 	.word	0x70000000
60001ae0:	2000129e 	.word	0x2000129e
60001ae4:	20001200 	.word	0x20001200
	FLEXSPI2_IPCR0 = addr;
60001ae8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001aec:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001af0:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001af2:	4808      	ldr	r0, [pc, #32]	; (60001b14 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60001af4:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001af8:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001afc:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b00:	6943      	ldr	r3, [r0, #20]
60001b02:	07db      	lsls	r3, r3, #31
60001b04:	d5fc      	bpl.n	60001b00 <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b06:	2301      	movs	r3, #1
60001b08:	2510      	movs	r5, #16
60001b0a:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
60001b0e:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
60001b10:	e79c      	b.n	60001a4c <configure_external_ram+0x2b8>
60001b12:	bf00      	nop
60001b14:	402a4000 	.word	0x402a4000

60001b18 <usb_pll_start>:
{
60001b18:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001b1a:	4a15      	ldr	r2, [pc, #84]	; (60001b70 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001b1c:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001b1e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001b22:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001b26:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b2a:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b2e:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001b32:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001b34:	f013 0f02 	tst.w	r3, #2
60001b38:	d10e      	bne.n	60001b58 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001b3a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001b3e:	d00f      	beq.n	60001b60 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001b40:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001b44:	d00e      	beq.n	60001b64 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001b46:	2b00      	cmp	r3, #0
60001b48:	daf3      	bge.n	60001b32 <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001b4a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001b4e:	d10b      	bne.n	60001b68 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001b50:	065b      	lsls	r3, r3, #25
60001b52:	d50b      	bpl.n	60001b6c <usb_pll_start+0x54>
}
60001b54:	bcf0      	pop	{r4, r5, r6, r7}
60001b56:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b58:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001b5a:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b5c:	6190      	str	r0, [r2, #24]
			continue;
60001b5e:	e7e8      	b.n	60001b32 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001b60:	6155      	str	r5, [r2, #20]
			continue;
60001b62:	e7e6      	b.n	60001b32 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001b64:	6156      	str	r6, [r2, #20]
			continue;
60001b66:	e7e4      	b.n	60001b32 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001b68:	6191      	str	r1, [r2, #24]
			continue;
60001b6a:	e7e2      	b.n	60001b32 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001b6c:	6157      	str	r7, [r2, #20]
			continue;
60001b6e:	e7e0      	b.n	60001b32 <usb_pll_start+0x1a>
60001b70:	400d8000 	.word	0x400d8000

60001b74 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b74:	4a3f      	ldr	r2, [pc, #252]	; (60001c74 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001b76:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001b78:	493f      	ldr	r1, [pc, #252]	; (60001c78 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b7a:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b7e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001b82:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b86:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60001c7c <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b8a:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b8e:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60001c80 <tempmon_init+0x10c>
{
60001b92:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001b98:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001b9c:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001ba0:	4d38      	ldr	r5, [pc, #224]	; (60001c84 <tempmon_init+0x110>)
60001ba2:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001ba4:	4c38      	ldr	r4, [pc, #224]	; (60001c88 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001ba6:	4839      	ldr	r0, [pc, #228]	; (60001c8c <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001ba8:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001baa:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001bae:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001bb0:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001bb8:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001bbc:	ee07 1a10 	vmov	s14, r1
60001bc0:	4b33      	ldr	r3, [pc, #204]	; (60001c90 <tempmon_init+0x11c>)
60001bc2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001bc6:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001bc8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001bcc:	4931      	ldr	r1, [pc, #196]	; (60001c94 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bce:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bd2:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001bd6:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bda:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bde:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001be2:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001be6:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001bea:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bee:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bf2:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bf6:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001bfa:	4827      	ldr	r0, [pc, #156]	; (60001c98 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bfc:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c00:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c04:	ee75 5a87 	vadd.f32	s11, s11, s14
60001c08:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c0c:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c10:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c14:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c18:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c1c:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c24:	ee16 3a10 	vmov	r3, s12
60001c28:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c30:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001c34:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c36:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c3a:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001c42:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60001c46:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001c48:	4914      	ldr	r1, [pc, #80]	; (60001c9c <tempmon_init+0x128>)
60001c4a:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001c4e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001c52:	f043 0302 	orr.w	r3, r3, #2
60001c56:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60001c5a:	4b11      	ldr	r3, [pc, #68]	; (60001ca0 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001c5c:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
60001c60:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001c64:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001c68:	2201      	movs	r2, #1
}
60001c6a:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001c6c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001c70:	4770      	bx	lr
60001c72:	bf00      	nop
60001c74:	400d8100 	.word	0x400d8100
60001c78:	401f4400 	.word	0x401f4400
60001c7c:	42aa0000 	.word	0x42aa0000
60001c80:	42b40000 	.word	0x42b40000
60001c84:	20001264 	.word	0x20001264
60001c88:	20001260 	.word	0x20001260
60001c8c:	20001268 	.word	0x20001268
60001c90:	2000126c 	.word	0x2000126c
60001c94:	0fff0000 	.word	0x0fff0000
60001c98:	e000e400 	.word	0xe000e400
60001c9c:	20000c00 	.word	0x20000c00
60001ca0:	000003a1 	.word	0x000003a1

60001ca4 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001ca4:	4b31      	ldr	r3, [pc, #196]	; (60001d6c <usb_init+0xc8>)
60001ca6:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001caa:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001cac:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001cb0:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001cb4:	f000 f8dc 	bl	60001e70 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001cb8:	4a2d      	ldr	r2, [pc, #180]	; (60001d70 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001cba:	492e      	ldr	r1, [pc, #184]	; (60001d74 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001cbc:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001cc0:	482d      	ldr	r0, [pc, #180]	; (60001d78 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001cc2:	f043 0303 	orr.w	r3, r3, #3
60001cc6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001cca:	4b2c      	ldr	r3, [pc, #176]	; (60001d7c <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001ccc:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001cd0:	6802      	ldr	r2, [r0, #0]
60001cd2:	421a      	tst	r2, r3
60001cd4:	d103      	bne.n	60001cde <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001cd6:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001cda:	079a      	lsls	r2, r3, #30
60001cdc:	d01b      	beq.n	60001d16 <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001cde:	4a25      	ldr	r2, [pc, #148]	; (60001d74 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001ce0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001ce4:	4b24      	ldr	r3, [pc, #144]	; (60001d78 <usb_init+0xd4>)
60001ce6:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001ce8:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001cec:	f043 0302 	orr.w	r3, r3, #2
60001cf0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001cf4:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001cf8:	079b      	lsls	r3, r3, #30
60001cfa:	d4fb      	bmi.n	60001cf4 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001cfc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001d00:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001d04:	4b1c      	ldr	r3, [pc, #112]	; (60001d78 <usb_init+0xd4>)
60001d06:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001d0a:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001d0e:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001d10:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
60001d12:	f000 f8a5 	bl	60001e60 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001d16:	4a18      	ldr	r2, [pc, #96]	; (60001d78 <usb_init+0xd4>)
60001d18:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d1c:	4c15      	ldr	r4, [pc, #84]	; (60001d74 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001d1e:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001d20:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d22:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d24:	4b16      	ldr	r3, [pc, #88]	; (60001d80 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60001d26:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d28:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d2c:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d30:	4618      	mov	r0, r3
60001d32:	f000 f891 	bl	60001e58 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001d36:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d3a:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d3c:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d40:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d44:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001d46:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60001d4a:	641a      	str	r2, [r3, #64]	; 0x40
60001d4c:	4b0d      	ldr	r3, [pc, #52]	; (60001d84 <usb_init+0xe0>)
60001d4e:	4a0e      	ldr	r2, [pc, #56]	; (60001d88 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d50:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001d54:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001d58:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001d5c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001d60:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001d62:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60001d66:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001d6a:	bd10      	pop	{r4, pc}
60001d6c:	400d8000 	.word	0x400d8000
60001d70:	400fc000 	.word	0x400fc000
60001d74:	402e0000 	.word	0x402e0000
60001d78:	400d9000 	.word	0x400d9000
60001d7c:	001e1c00 	.word	0x001e1c00
60001d80:	20000000 	.word	0x20000000
60001d84:	20000c00 	.word	0x20000c00
60001d88:	00000589 	.word	0x00000589

60001d8c <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60001d8c:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001d8e:	4b0e      	ldr	r3, [pc, #56]	; (60001dc8 <_reboot_Teensyduino_+0x3c>)
60001d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001d92:	079b      	lsls	r3, r3, #30
60001d94:	d400      	bmi.n	60001d98 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001d96:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001d98:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001d9a:	4b0c      	ldr	r3, [pc, #48]	; (60001dcc <_reboot_Teensyduino_+0x40>)
60001d9c:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001d9e:	4a0c      	ldr	r2, [pc, #48]	; (60001dd0 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001da0:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001da4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001da8:	490a      	ldr	r1, [pc, #40]	; (60001dd4 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001daa:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001dae:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001db0:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001db2:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001db6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001dba:	4807      	ldr	r0, [pc, #28]	; (60001dd8 <_reboot_Teensyduino_+0x4c>)
60001dbc:	4a07      	ldr	r2, [pc, #28]	; (60001ddc <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001dbe:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001dc0:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001dc2:	689b      	ldr	r3, [r3, #8]
60001dc4:	4798      	blx	r3
	}
	__builtin_unreachable();
60001dc6:	bf00      	nop
60001dc8:	401f4400 	.word	0x401f4400
60001dcc:	402e0000 	.word	0x402e0000
60001dd0:	400ac000 	.word	0x400ac000
60001dd4:	00200003 	.word	0x00200003
60001dd8:	20208000 	.word	0x20208000
60001ddc:	eb120000 	.word	0xeb120000

60001de0 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001de0:	4b10      	ldr	r3, [pc, #64]	; (60001e24 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001de2:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001de4:	4a10      	ldr	r2, [pc, #64]	; (60001e28 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001de6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001de8:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60001dec:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001dee:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001df0:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001df4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001df6:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60001dfa:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001dfc:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001dfe:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001e00:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001e02:	061b      	lsls	r3, r3, #24
60001e04:	d4fc      	bmi.n	60001e00 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001e06:	4a09      	ldr	r2, [pc, #36]	; (60001e2c <analog_init+0x4c>)
60001e08:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001e0c:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001e0e:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001e10:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001e12:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001e14:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001e18:	d1fb      	bne.n	60001e12 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60001e1a:	4a05      	ldr	r2, [pc, #20]	; (60001e30 <analog_init+0x50>)
60001e1c:	7013      	strb	r3, [r2, #0]
}
60001e1e:	f85d 4b04 	ldr.w	r4, [sp], #4
60001e22:	4770      	bx	lr
60001e24:	400fc000 	.word	0x400fc000
60001e28:	400c4000 	.word	0x400c4000
60001e2c:	400c8000 	.word	0x400c8000
60001e30:	2000129d 	.word	0x2000129d

60001e34 <_init>:
60001e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001e36:	bf00      	nop
60001e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001e3a:	bc08      	pop	{r3}
60001e3c:	469e      	mov	lr, r3
60001e3e:	4770      	bx	lr

60001e40 <____libc_init_array_veneer>:
60001e40:	f85f f000 	ldr.w	pc, [pc]	; 60001e44 <____libc_init_array_veneer+0x4>
60001e44:	000018e9 	.word	0x000018e9

60001e48 <__main_veneer>:
60001e48:	f85f f000 	ldr.w	pc, [pc]	; 60001e4c <__main_veneer+0x4>
60001e4c:	00000205 	.word	0x00000205

60001e50 <__sm_set_pool_veneer>:
60001e50:	f85f f000 	ldr.w	pc, [pc]	; 60001e54 <__sm_set_pool_veneer+0x4>
60001e54:	000017b5 	.word	0x000017b5

60001e58 <__memset_veneer>:
60001e58:	f85f f000 	ldr.w	pc, [pc]	; 60001e5c <__memset_veneer+0x4>
60001e5c:	00001839 	.word	0x00001839

60001e60 <__delay_veneer>:
60001e60:	f85f f000 	ldr.w	pc, [pc]	; 60001e64 <__delay_veneer+0x4>
60001e64:	00000099 	.word	0x00000099

60001e68 <__pwm_init_veneer>:
60001e68:	f85f f000 	ldr.w	pc, [pc]	; 60001e6c <__pwm_init_veneer+0x4>
60001e6c:	00001651 	.word	0x00001651

60001e70 <__usb_init_serialnumber_veneer>:
60001e70:	f85f f000 	ldr.w	pc, [pc]	; 60001e74 <__usb_init_serialnumber_veneer+0x4>
60001e74:	00000cf5 	.word	0x00000cf5

60001e78 <__set_arm_clock_veneer>:
60001e78:	f85f f000 	ldr.w	pc, [pc]	; 60001e7c <__set_arm_clock_veneer+0x4>
60001e7c:	0000114d 	.word	0x0000114d

60001e80 <__frame_dummy_init_array_entry>:
60001e80:	00000045                                E...

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
                        return (void *)-1;
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
                        errno = ENOMEM;
      24:	1a1b      	subs	r3, r3, r0
                }
                __brkval = prev + incr;
        }
        return prev;
}
      26:	0fd9      	lsrs	r1, r3, #31
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x11>
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x11>
	// set the SRTC
	SNVS_LPSRTCLR = t << 15;
	SNVS_LPSRTCMR = t >> 17;
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
      34:	4718      	bx	r3
      36:	4770      	bx	lr
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
      38:	20000ec0 	.word	0x20000ec0
      3c:	20000ec0 	.word	0x20000ec0
}
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
}
      60:	20001210 	.word	0x20001210
      64:	60005400 	.word	0x60005400

00000068 <setup>:
*/

// the setup function runs once when you press reset or power the board
void setup() {
  // initialize digital pin LED_BUILTIN as an output.
  pinMode(LED_BUILTIN, OUTPUT);
      68:	2101      	movs	r1, #1
      6a:	200d      	movs	r0, #13
      6c:	f000 b892 	b.w	194 <pinMode>

00000070 <loop>:
}

// the loop function runs over and over again forever
void loop() {
      70:	b508      	push	{r3, lr}
  digitalWrite(LED_BUILTIN, HIGH);  // turn the LED on (HIGH is the voltage level)
      72:	2101      	movs	r1, #1
      74:	200d      	movs	r0, #13
      76:	f000 f863 	bl	140 <digitalWrite>
  delay(1000);                      // wait for a second
      7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
      7e:	f000 f80b 	bl	98 <delay>
  digitalWrite(LED_BUILTIN, LOW);   // turn the LED off by making the voltage LOW
      82:	200d      	movs	r0, #13
      84:	2100      	movs	r1, #0
      86:	f000 f85b 	bl	140 <digitalWrite>
  delay(1000);                      // wait for a second
      8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
      8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(1000);                      // wait for a second
      92:	f000 b801 	b.w	98 <delay>
	if(!(ch & 0x80)) {
      96:	bf00      	nop

00000098 <delay>:
	if (msec == 0) return;
      98:	b900      	cbnz	r0, 9c <delay+0x4>
      9a:	4770      	bx	lr
{
      9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
      a0:	2101      	movs	r1, #1
      a2:	4681      	mov	r9, r0
      a4:	4c21      	ldr	r4, [pc, #132]	; (12c <delay+0x94>)
      a6:	4d22      	ldr	r5, [pc, #136]	; (130 <delay+0x98>)
      a8:	4e22      	ldr	r6, [pc, #136]	; (134 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
      aa:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
      ae:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
      b0:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
      b2:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
      b6:	2b00      	cmp	r3, #0
      b8:	d1f7      	bne.n	aa <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
      ba:	491f      	ldr	r1, [pc, #124]	; (138 <delay+0xa0>)
      bc:	684b      	ldr	r3, [r1, #4]
	uint32_t usec = 1000*smc + frac;
      be:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
      c2:	f8df a078 	ldr.w	sl, [pc, #120]	; 13c <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
      c6:	1a1b      	subs	r3, r3, r0
      c8:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
      ca:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
      ce:	f8da 2000 	ldr.w	r2, [sl]
      d2:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
      d6:	455a      	cmp	r2, fp
      d8:	bf94      	ite	ls
      da:	4490      	addls	r8, r2
      dc:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
      de:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
      e2:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
      e4:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
      e6:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
      ea:	2b00      	cmp	r3, #0
      ec:	d1f7      	bne.n	de <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
      ee:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
      f0:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
      f4:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
      f6:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
      fa:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
      fe:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
     102:	bf94      	ite	ls
     104:	4462      	addls	r2, ip
     106:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
     10a:	eba2 0208 	sub.w	r2, r2, r8
     10e:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
     112:	d306      	bcc.n	122 <delay+0x8a>
			if (--msec == 0) return;
     114:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
     118:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
     11c:	d1df      	bne.n	de <delay+0x46>
}
     11e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
     122:	f000 ff73 	bl	100c <yield>
		while ((micros() - start) >= 1000) {
     126:	4904      	ldr	r1, [pc, #16]	; (138 <delay+0xa0>)
     128:	e7d9      	b.n	de <delay+0x46>
     12a:	bf00      	nop
     12c:	2000127c 	.word	0x2000127c
     130:	20001278 	.word	0x20001278
     134:	20001274 	.word	0x20001274
     138:	e0001000 	.word	0xe0001000
     13c:	20001270 	.word	0x20001270

00000140 <digitalWrite>:
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     140:	2836      	cmp	r0, #54	; 0x36
     142:	d816      	bhi.n	172 <digitalWrite+0x32>
     144:	0102      	lsls	r2, r0, #4
     146:	4b10      	ldr	r3, [pc, #64]	; (188 <digitalWrite+0x48>)
     148:	eb03 1000 	add.w	r0, r3, r0, lsl #4
     14c:	589b      	ldr	r3, [r3, r2]
     14e:	b410      	push	{r4}
     150:	68c2      	ldr	r2, [r0, #12]
     152:	685c      	ldr	r4, [r3, #4]
     154:	4214      	tst	r4, r2
     156:	d005      	beq.n	164 <digitalWrite+0x24>
     158:	b961      	cbnz	r1, 174 <digitalWrite+0x34>
     15a:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
     15e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		}
	}
}
     162:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     164:	6883      	ldr	r3, [r0, #8]
		if (val) {
     166:	b151      	cbz	r1, 17e <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     168:	4a08      	ldr	r2, [pc, #32]	; (18c <digitalWrite+0x4c>)
}
     16a:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     16e:	601a      	str	r2, [r3, #0]
}
     170:	4770      	bx	lr
     172:	4770      	bx	lr
     174:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
     178:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
     17c:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     17e:	4a04      	ldr	r2, [pc, #16]	; (190 <digitalWrite+0x50>)
}
     180:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     184:	601a      	str	r2, [r3, #0]
}
     186:	4770      	bx	lr
     188:	20000280 	.word	0x20000280
     18c:	0001f038 	.word	0x0001f038
     190:	00013038 	.word	0x00013038

00000194 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
     194:	2836      	cmp	r0, #54	; 0x36
     196:	d829      	bhi.n	1ec <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
     198:	4b16      	ldr	r3, [pc, #88]	; (1f4 <pinMode+0x60>)
     19a:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
     19c:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
     19e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     1a2:	589a      	ldr	r2, [r3, r2]
{
     1a4:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     1a6:	6853      	ldr	r3, [r2, #4]
     1a8:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
     1aa:	d00e      	beq.n	1ca <pinMode+0x36>
     1ac:	2904      	cmp	r1, #4
     1ae:	d00c      	beq.n	1ca <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     1b0:	ea23 0304 	bic.w	r3, r3, r4
     1b4:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
     1b6:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
     1b8:	b1a9      	cbz	r1, 1e6 <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
     1ba:	2902      	cmp	r1, #2
     1bc:	d017      	beq.n	1ee <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
     1be:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     1c0:	bf0c      	ite	eq
     1c2:	4a0d      	ldreq	r2, [pc, #52]	; (1f8 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
     1c4:	4a0d      	ldrne	r2, [pc, #52]	; (1fc <pinMode+0x68>)
     1c6:	601a      	str	r2, [r3, #0]
     1c8:	e007      	b.n	1da <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
     1ca:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
     1cc:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
     1ce:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
     1d0:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
     1d2:	d008      	beq.n	1e6 <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
     1d4:	f640 0238 	movw	r2, #2104	; 0x838
     1d8:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
     1da:	6843      	ldr	r3, [r0, #4]
     1dc:	2215      	movs	r2, #21
}
     1de:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
     1e2:	601a      	str	r2, [r3, #0]
}
     1e4:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
     1e6:	2238      	movs	r2, #56	; 0x38
     1e8:	601a      	str	r2, [r3, #0]
     1ea:	e7f6      	b.n	1da <pinMode+0x46>
     1ec:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     1ee:	4a04      	ldr	r2, [pc, #16]	; (200 <pinMode+0x6c>)
     1f0:	601a      	str	r2, [r3, #0]
     1f2:	e7f2      	b.n	1da <pinMode+0x46>
     1f4:	20000280 	.word	0x20000280
     1f8:	00013038 	.word	0x00013038
     1fc:	00010038 	.word	0x00010038
     200:	0001f038 	.word	0x0001f038

00000204 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
     204:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
     206:	f7ff ff2f 	bl	68 <setup>
	while (1) {
		loop();
     20a:	f7ff ff31 	bl	70 <loop>
		yield();
     20e:	f000 fefd 	bl	100c <yield>
	while (1) {
     212:	e7fa      	b.n	20a <main+0x6>

00000214 <unused_interrupt_vector>:
	__disable_irq();
     214:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
     216:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
     21a:	4c52      	ldr	r4, [pc, #328]	; (364 <unused_interrupt_vector+0x150>)
     21c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
     220:	f01e 0f04 	tst.w	lr, #4
     224:	bf0c      	ite	eq
     226:	f3ef 8208 	mrseq	r2, MSP
     22a:	f3ef 8209 	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
     22e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
     232:	4e4d      	ldr	r6, [pc, #308]	; (368 <unused_interrupt_vector+0x154>)
	while (p < end) {
     234:	4d4d      	ldr	r5, [pc, #308]	; (36c <unused_interrupt_vector+0x158>)
	info->cfsr = SCB_CFSR;
     236:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
     23a:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
     23e:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
     242:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
     246:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
     24a:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
     24e:	6993      	ldr	r3, [r2, #24]
     250:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
     254:	69d3      	ldr	r3, [r2, #28]
     256:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
     25a:	f000 f8a3 	bl	3a4 <tempmonGetTemp>
     25e:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
     262:	f001 fa6f 	bl	1744 <rtc_get>
	info->len = sizeof(*info) / 4;
     266:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
     268:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	info->time = rtc_get();
     26c:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
     270:	460b      	mov	r3, r1
     272:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
     276:	493e      	ldr	r1, [pc, #248]	; (370 <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
     278:	1d30      	adds	r0, r6, #4
     27a:	405a      	eors	r2, r3
     27c:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
     27e:	f002 0301 	and.w	r3, r2, #1
     282:	3c01      	subs	r4, #1
     284:	fb01 f303 	mul.w	r3, r1, r3
     288:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
     28c:	d1f7      	bne.n	27e <unused_interrupt_vector+0x6a>
	while (p < end) {
     28e:	42a8      	cmp	r0, r5
     290:	d002      	beq.n	298 <unused_interrupt_vector+0x84>
		crc ^= *p++;
     292:	6873      	ldr	r3, [r6, #4]
     294:	4606      	mov	r6, r0
     296:	e7ef      	b.n	278 <unused_interrupt_vector+0x64>
	info->crc = crc;
     298:	4b32      	ldr	r3, [pc, #200]	; (364 <unused_interrupt_vector+0x150>)
     29a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
     29e:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
     2a2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     2a6:	4930      	ldr	r1, [pc, #192]	; (368 <unused_interrupt_vector+0x154>)
     2a8:	4a32      	ldr	r2, [pc, #200]	; (374 <unused_interrupt_vector+0x160>)
     2aa:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
     2ae:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
     2b2:	f3bf 8f4f 	dsb	sy
	asm("isb");
     2b6:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
     2ba:	4a2f      	ldr	r2, [pc, #188]	; (378 <unused_interrupt_vector+0x164>)
	PIT_MCR = PIT_MCR_MDIS;
     2bc:	2502      	movs	r5, #2
     2be:	482f      	ldr	r0, [pc, #188]	; (37c <unused_interrupt_vector+0x168>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
     2c0:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
     2c2:	492f      	ldr	r1, [pc, #188]	; (380 <unused_interrupt_vector+0x16c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
     2c4:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
     2c8:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
     2ca:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
     2cc:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
     2ce:	482d      	ldr	r0, [pc, #180]	; (384 <unused_interrupt_vector+0x170>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
     2d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     2d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     2d8:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
     2da:	680b      	ldr	r3, [r1, #0]
     2dc:	4283      	cmp	r3, r0
     2de:	d83d      	bhi.n	35c <unused_interrupt_vector+0x148>
	PIT_MCR = 0;
     2e0:	4d26      	ldr	r5, [pc, #152]	; (37c <unused_interrupt_vector+0x168>)
     2e2:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
     2e4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     2e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	PIT_MCR = 0;
     2ec:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
     2ee:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
     2f0:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
     2f4:	4924      	ldr	r1, [pc, #144]	; (388 <unused_interrupt_vector+0x174>)
     2f6:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
     2fa:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
     2fe:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
     302:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
     306:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
     30a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
     30e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
     312:	e001      	b.n	318 <unused_interrupt_vector+0x104>
		usb_isr();
     314:	f000 f938 	bl	588 <usb_isr>
		if (PIT_TFLG0) {
     318:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
     31c:	2b00      	cmp	r3, #0
     31e:	d0f9      	beq.n	314 <unused_interrupt_vector+0x100>
			if (++count >= 80) break;  // reboot after 8 seconds
     320:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
     322:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
     326:	2c4f      	cmp	r4, #79	; 0x4f
     328:	d9f4      	bls.n	314 <unused_interrupt_vector+0x100>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
     32a:	4b18      	ldr	r3, [pc, #96]	; (38c <unused_interrupt_vector+0x178>)
	USB1_USBCMD = USB_USBCMD_RST;
     32c:	2002      	movs	r0, #2
     32e:	4918      	ldr	r1, [pc, #96]	; (390 <unused_interrupt_vector+0x17c>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
     330:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
     334:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
     338:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
     33a:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
     33e:	b93b      	cbnz	r3, 350 <unused_interrupt_vector+0x13c>
	SRC_GPR5 = 0x0BAD00F1;
     340:	4814      	ldr	r0, [pc, #80]	; (394 <unused_interrupt_vector+0x180>)
     342:	4915      	ldr	r1, [pc, #84]	; (398 <unused_interrupt_vector+0x184>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
     344:	4a0d      	ldr	r2, [pc, #52]	; (37c <unused_interrupt_vector+0x168>)
	SRC_GPR5 = 0x0BAD00F1;
     346:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
     348:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
     34c:	2b00      	cmp	r3, #0
     34e:	d0fa      	beq.n	346 <unused_interrupt_vector+0x132>
	SCB_AIRCR = 0x05FA0004;
     350:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     354:	4a11      	ldr	r2, [pc, #68]	; (39c <unused_interrupt_vector+0x188>)
     356:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
     35a:	e7fe      	b.n	35a <unused_interrupt_vector+0x146>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
     35c:	f000 fef6 	bl	114c <set_arm_clock>
     360:	e7be      	b.n	2e0 <unused_interrupt_vector+0xcc>
     362:	bf00      	nop
     364:	2027ff00 	.word	0x2027ff00
     368:	2027ff80 	.word	0x2027ff80
     36c:	2027ffa8 	.word	0x2027ffa8
     370:	edb88320 	.word	0xedb88320
     374:	2027ffa0 	.word	0x2027ffa0
     378:	400fc000 	.word	0x400fc000
     37c:	40084000 	.word	0x40084000
     380:	2000079c 	.word	0x2000079c
     384:	0bcd3d80 	.word	0x0bcd3d80
     388:	00249f00 	.word	0x00249f00
     38c:	400d9000 	.word	0x400d9000
     390:	402e0000 	.word	0x402e0000
     394:	400f8000 	.word	0x400f8000
     398:	0bad00f1 	.word	0x0bad00f1
     39c:	05fa0004 	.word	0x05fa0004

000003a0 <Panic_Temp_isr>:
  unused_interrupt_vector();
     3a0:	f7ff bf38 	b.w	214 <unused_interrupt_vector>

000003a4 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
     3a4:	4a12      	ldr	r2, [pc, #72]	; (3f0 <tempmonGetTemp+0x4c>)
     3a6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
     3aa:	075b      	lsls	r3, r3, #29
     3ac:	d5fb      	bpl.n	3a6 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
     3ae:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
     3b2:	4810      	ldr	r0, [pc, #64]	; (3f4 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
     3b4:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
     3b8:	490f      	ldr	r1, [pc, #60]	; (3f8 <tempmonGetTemp+0x54>)
     3ba:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
     3be:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
     3c2:	ed91 6a00 	vldr	s12, [r1]
     3c6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
     3ca:	4a0c      	ldr	r2, [pc, #48]	; (3fc <tempmonGetTemp+0x58>)
     3cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     3d0:	4b0b      	ldr	r3, [pc, #44]	; (400 <tempmonGetTemp+0x5c>)
     3d2:	edd2 6a00 	vldr	s13, [r2]
     3d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
     3da:	ed93 7a00 	vldr	s14, [r3]
     3de:	eeb8 7a47 	vcvt.f32.u32	s14, s14
     3e2:	ee67 7a86 	vmul.f32	s15, s15, s12
     3e6:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
     3ea:	ee37 0a40 	vsub.f32	s0, s14, s0
     3ee:	4770      	bx	lr
     3f0:	400d8100 	.word	0x400d8100
     3f4:	20001260 	.word	0x20001260
     3f8:	20001268 	.word	0x20001268
     3fc:	2000126c 	.word	0x2000126c
     400:	20001264 	.word	0x20001264

00000404 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
     404:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
     406:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
     408:	b11b      	cbz	r3, 412 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
     40a:	6853      	ldr	r3, [r2, #4]
     40c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     410:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
     412:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
     414:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
     416:	b33c      	cbz	r4, 468 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
     418:	4b1a      	ldr	r3, [pc, #104]	; (484 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
     41a:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
     41c:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
     420:	420c      	tst	r4, r1
     422:	d11d      	bne.n	460 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
     424:	4e18      	ldr	r6, [pc, #96]	; (488 <schedule_transfer+0x84>)
     426:	6877      	ldr	r7, [r6, #4]
     428:	e004      	b.n	434 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
     42a:	6874      	ldr	r4, [r6, #4]
     42c:	1be4      	subs	r4, r4, r7
     42e:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
     432:	d20b      	bcs.n	44c <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
     434:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
     438:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
     43c:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
     440:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
     444:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
     448:	0464      	lsls	r4, r4, #17
     44a:	d5ee      	bpl.n	42a <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
     44c:	400d      	ands	r5, r1
     44e:	d107      	bne.n	460 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
     450:	4c0c      	ldr	r4, [pc, #48]	; (484 <schedule_transfer+0x80>)
		endpoint->status = 0;
     452:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
     456:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     45a:	430b      	orrs	r3, r1
     45c:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
     460:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
     462:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
     464:	bcf0      	pop	{r4, r5, r6, r7}
     466:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
     468:	4d06      	ldr	r5, [pc, #24]	; (484 <schedule_transfer+0x80>)
	endpoint->status = 0;
     46a:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
     46e:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
     472:	430b      	orrs	r3, r1
     474:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
     478:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
     47a:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
     47c:	b662      	cpsie	i
}
     47e:	bcf0      	pop	{r4, r5, r6, r7}
     480:	4770      	bx	lr
     482:	bf00      	nop
     484:	402e0000 	.word	0x402e0000
     488:	e0001000 	.word	0xe0001000

0000048c <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
     48c:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
     48e:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
     490:	b19d      	cbz	r5, 4ba <run_callbacks+0x2e>
     492:	4606      	mov	r6, r0
     494:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
     496:	2400      	movs	r4, #0
     498:	e003      	b.n	4a2 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
     49a:	6812      	ldr	r2, [r2, #0]
		count++;
     49c:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
     49e:	2a01      	cmp	r2, #1
     4a0:	d00c      	beq.n	4bc <run_callbacks+0x30>
		if (t->status & (1<<7)) {
     4a2:	6853      	ldr	r3, [r2, #4]
     4a4:	f013 0380 	ands.w	r3, r3, #128	; 0x80
     4a8:	d0f7      	beq.n	49a <run_callbacks+0xe>
			ep->first_transfer = t;
     4aa:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
     4ac:	b12c      	cbz	r4, 4ba <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
     4ae:	4628      	mov	r0, r5
		ep->callback_function(first);
     4b0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
     4b2:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
     4b4:	4798      	blx	r3
	while (count) {
     4b6:	3c01      	subs	r4, #1
     4b8:	d1f9      	bne.n	4ae <run_callbacks+0x22>
		first = next;
		count--;
	}
}
     4ba:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
     4bc:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
     4c0:	e7f4      	b.n	4ac <run_callbacks+0x20>
     4c2:	bf00      	nop

000004c4 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
     4c4:	b430      	push	{r4, r5}
	if (len > 0) {
     4c6:	b9d9      	cbnz	r1, 500 <endpoint0_transmit.constprop.0+0x3c>
     4c8:	4c1f      	ldr	r4, [pc, #124]	; (548 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
     4ca:	4b20      	ldr	r3, [pc, #128]	; (54c <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
     4cc:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     4ce:	4a20      	ldr	r2, [pc, #128]	; (550 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
     4d0:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     4d2:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
     4d6:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
     4d8:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
     4da:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     4de:	2480      	movs	r4, #128	; 0x80
     4e0:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     4e2:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
     4e6:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
     4ea:	481a      	ldr	r0, [pc, #104]	; (554 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
     4ec:	432b      	orrs	r3, r5
     4ee:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
     4f2:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
     4f4:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
     4f8:	2b00      	cmp	r3, #0
     4fa:	d1fb      	bne.n	4f4 <endpoint0_transmit.constprop.0+0x30>
}
     4fc:	bc30      	pop	{r4, r5}
     4fe:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     500:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
     502:	4b15      	ldr	r3, [pc, #84]	; (558 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
     504:	4c10      	ldr	r4, [pc, #64]	; (548 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
     506:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     508:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
     50c:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
     50e:	4a10      	ldr	r2, [pc, #64]	; (550 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     510:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
     512:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
     516:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
     518:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
     51a:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
     51e:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
     520:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
     522:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
     526:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
     52a:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
     52c:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
     52e:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
     530:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
     532:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
     536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     53a:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
     53e:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
     542:	2b00      	cmp	r3, #0
     544:	d1fb      	bne.n	53e <endpoint0_transmit.constprop.0+0x7a>
     546:	e7c0      	b.n	4ca <endpoint0_transmit.constprop.0+0x6>
     548:	20000000 	.word	0x20000000
     54c:	20000ec0 	.word	0x20000ec0
     550:	402e0000 	.word	0x402e0000
     554:	200011f8 	.word	0x200011f8
     558:	20000ee0 	.word	0x20000ee0

0000055c <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
     55c:	4908      	ldr	r1, [pc, #32]	; (580 <usb_stop_sof_interrupts+0x24>)
     55e:	2201      	movs	r2, #1
     560:	780b      	ldrb	r3, [r1, #0]
     562:	fa02 f000 	lsl.w	r0, r2, r0
     566:	ea23 0000 	bic.w	r0, r3, r0
     56a:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
     56c:	b930      	cbnz	r0, 57c <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
     56e:	4a05      	ldr	r2, [pc, #20]	; (584 <usb_stop_sof_interrupts+0x28>)
     570:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
     574:	f023 0380 	bic.w	r3, r3, #128	; 0x80
     578:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
     57c:	4770      	bx	lr
     57e:	bf00      	nop
     580:	200012a1 	.word	0x200012a1
     584:	402e0000 	.word	0x402e0000

00000588 <usb_isr>:
{
     588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
     58c:	4c97      	ldr	r4, [pc, #604]	; (7ec <usb_isr+0x264>)
{
     58e:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
     590:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
     594:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
     596:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
     59a:	d553      	bpl.n	644 <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
     59c:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
     5a0:	2a00      	cmp	r2, #0
     5a2:	d04a      	beq.n	63a <usb_isr+0xb2>
     5a4:	4e92      	ldr	r6, [pc, #584]	; (7f0 <usb_isr+0x268>)
     5a6:	f8df a260 	ldr.w	sl, [pc, #608]	; 808 <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
     5aa:	f8df 9274 	ldr.w	r9, [pc, #628]	; 820 <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
     5ae:	f8df b274 	ldr.w	fp, [pc, #628]	; 824 <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
     5b2:	f8df 8274 	ldr.w	r8, [pc, #628]	; 828 <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
     5b6:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
     5ba:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
     5be:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
     5c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     5c6:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
     5ca:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
     5ce:	049d      	lsls	r5, r3, #18
     5d0:	d5f5      	bpl.n	5be <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
     5d2:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
     5d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
     5da:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
     5de:	f04f 1301 	mov.w	r3, #65537	; 0x10001
     5e2:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
     5e6:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
     5ea:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
     5ee:	d1fa      	bne.n	5e6 <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
     5f0:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
     5f2:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
     5f4:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
     5f8:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
     5fc:	f000 81cf 	beq.w	99e <usb_isr+0x416>
     600:	f200 80db 	bhi.w	7ba <usb_isr+0x232>
     604:	f240 3102 	movw	r1, #770	; 0x302
     608:	428b      	cmp	r3, r1
     60a:	f000 81e7 	beq.w	9dc <usb_isr+0x454>
     60e:	f200 809a 	bhi.w	746 <usb_isr+0x1be>
     612:	2b82      	cmp	r3, #130	; 0x82
     614:	f000 81cb 	beq.w	9ae <usb_isr+0x426>
     618:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
     61c:	f040 808a 	bne.w	734 <usb_isr+0x1ac>
		if (endpoint > 7) break;
     620:	f010 0f78 	tst.w	r0, #120	; 0x78
     624:	b283      	uxth	r3, r0
     626:	f000 8203 	beq.w	a30 <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
     62a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
     62e:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     632:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
     636:	2a00      	cmp	r2, #0
     638:	d1bd      	bne.n	5b6 <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
     63a:	4a6c      	ldr	r2, [pc, #432]	; (7ec <usb_isr+0x264>)
     63c:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
     640:	2b00      	cmp	r3, #0
     642:	d142      	bne.n	6ca <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
     644:	067e      	lsls	r6, r7, #25
     646:	d516      	bpl.n	676 <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
     648:	4b68      	ldr	r3, [pc, #416]	; (7ec <usb_isr+0x264>)
     64a:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
     64e:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
     652:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
     656:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
     65a:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
     65e:	2c00      	cmp	r4, #0
     660:	d1fb      	bne.n	65a <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
     662:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     666:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
     66a:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
     66e:	f000 fc3f 	bl	ef0 <usb_serial_reset>
		endpointN_notify_mask = 0;
     672:	4b60      	ldr	r3, [pc, #384]	; (7f4 <usb_isr+0x26c>)
     674:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
     676:	01fc      	lsls	r4, r7, #7
     678:	d503      	bpl.n	682 <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
     67a:	4b5f      	ldr	r3, [pc, #380]	; (7f8 <usb_isr+0x270>)
     67c:	681b      	ldr	r3, [r3, #0]
     67e:	b103      	cbz	r3, 682 <usb_isr+0xfa>
     680:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
     682:	01b8      	lsls	r0, r7, #6
     684:	d503      	bpl.n	68e <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
     686:	4b5d      	ldr	r3, [pc, #372]	; (7fc <usb_isr+0x274>)
     688:	681b      	ldr	r3, [r3, #0]
     68a:	b103      	cbz	r3, 68e <usb_isr+0x106>
     68c:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
     68e:	0779      	lsls	r1, r7, #29
     690:	d508      	bpl.n	6a4 <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
     692:	4b56      	ldr	r3, [pc, #344]	; (7ec <usb_isr+0x264>)
     694:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
     698:	f413 7300 	ands.w	r3, r3, #512	; 0x200
     69c:	d047      	beq.n	72e <usb_isr+0x1a6>
			usb_high_speed = 1;
     69e:	4b58      	ldr	r3, [pc, #352]	; (800 <usb_isr+0x278>)
     6a0:	2201      	movs	r2, #1
     6a2:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
     6a4:	4b51      	ldr	r3, [pc, #324]	; (7ec <usb_isr+0x264>)
     6a6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
     6aa:	061a      	lsls	r2, r3, #24
     6ac:	d50a      	bpl.n	6c4 <usb_isr+0x13c>
     6ae:	063b      	lsls	r3, r7, #24
     6b0:	d508      	bpl.n	6c4 <usb_isr+0x13c>
		if (usb_reboot_timer) {
     6b2:	4a54      	ldr	r2, [pc, #336]	; (804 <usb_isr+0x27c>)
     6b4:	7813      	ldrb	r3, [r2, #0]
     6b6:	b12b      	cbz	r3, 6c4 <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
     6b8:	3b01      	subs	r3, #1
     6ba:	b2db      	uxtb	r3, r3
     6bc:	7013      	strb	r3, [r2, #0]
     6be:	2b00      	cmp	r3, #0
     6c0:	f000 8272 	beq.w	ba8 <usb_isr+0x620>
}
     6c4:	b003      	add	sp, #12
     6c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
     6ca:	494f      	ldr	r1, [pc, #316]	; (808 <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
     6cc:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
     6d0:	6808      	ldr	r0, [r1, #0]
     6d2:	4203      	tst	r3, r0
     6d4:	f040 81d1 	bne.w	a7a <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
     6d8:	4a46      	ldr	r2, [pc, #280]	; (7f4 <usb_isr+0x26c>)
     6da:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
     6dc:	401c      	ands	r4, r3
     6de:	d0b1      	beq.n	644 <usb_isr+0xbc>
				while (tx) {
     6e0:	ea5f 4814 	movs.w	r8, r4, lsr #16
     6e4:	d010      	beq.n	708 <usb_isr+0x180>
     6e6:	4e42      	ldr	r6, [pc, #264]	; (7f0 <usb_isr+0x268>)
					tx &= ~(1<<p);
     6e8:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
     6ec:	fa98 f5a8 	rbit	r5, r8
     6f0:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
     6f4:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
     6f8:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
     6fc:	3040      	adds	r0, #64	; 0x40
     6fe:	f7ff fec5 	bl	48c <run_callbacks>
				while (tx) {
     702:	ea38 0805 	bics.w	r8, r8, r5
     706:	d1f1      	bne.n	6ec <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
     708:	b2a4      	uxth	r4, r4
				while(rx) {
     70a:	2c00      	cmp	r4, #0
     70c:	d09a      	beq.n	644 <usb_isr+0xbc>
     70e:	4e38      	ldr	r6, [pc, #224]	; (7f0 <usb_isr+0x268>)
					rx &= ~(1<<p);
     710:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
     714:	fa94 f5a4 	rbit	r5, r4
     718:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
     71c:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
     720:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
     724:	f7ff feb2 	bl	48c <run_callbacks>
				while(rx) {
     728:	43ac      	bics	r4, r5
     72a:	d1f3      	bne.n	714 <usb_isr+0x18c>
     72c:	e78a      	b.n	644 <usb_isr+0xbc>
			usb_high_speed = 0;
     72e:	4a34      	ldr	r2, [pc, #208]	; (800 <usb_isr+0x278>)
     730:	7013      	strb	r3, [r2, #0]
     732:	e7b7      	b.n	6a4 <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
     734:	2b80      	cmp	r3, #128	; 0x80
     736:	f47f af78 	bne.w	62a <usb_isr+0xa2>
		reply_buffer[0] = 0;
     73a:	4834      	ldr	r0, [pc, #208]	; (80c <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
     73c:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
     73e:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
     740:	f7ff fec0 	bl	4c4 <endpoint0_transmit.constprop.0>
		return;
     744:	e775      	b.n	632 <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
     746:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     74a:	f000 810b 	beq.w	964 <usb_isr+0x3dc>
     74e:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
     752:	2b01      	cmp	r3, #1
     754:	f63f af69 	bhi.w	62a <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
     758:	4b2d      	ldr	r3, [pc, #180]	; (810 <usb_isr+0x288>)
     75a:	685d      	ldr	r5, [r3, #4]
     75c:	2d00      	cmp	r5, #0
     75e:	f43f af64 	beq.w	62a <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
     762:	fa1f fc8c 	uxth.w	ip, ip
     766:	ea4f 4e12 	mov.w	lr, r2, lsr #16
     76a:	e004      	b.n	776 <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
     76c:	691d      	ldr	r5, [r3, #16]
     76e:	330c      	adds	r3, #12
     770:	2d00      	cmp	r5, #0
     772:	f43f af5a 	beq.w	62a <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
     776:	881a      	ldrh	r2, [r3, #0]
     778:	4572      	cmp	r2, lr
     77a:	d1f7      	bne.n	76c <usb_isr+0x1e4>
     77c:	885a      	ldrh	r2, [r3, #2]
     77e:	4562      	cmp	r2, ip
     780:	d1f4      	bne.n	76c <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
     782:	ea4f 221e 	mov.w	r2, lr, lsr #8
     786:	2a03      	cmp	r2, #3
     788:	f000 81a5 	beq.w	ad6 <usb_isr+0x54e>
					datalen = list->length;
     78c:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
     78e:	0c00      	lsrs	r0, r0, #16
     790:	4282      	cmp	r2, r0
     792:	bf28      	it	cs
     794:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
     796:	f5be 7f00 	cmp.w	lr, #512	; 0x200
     79a:	f040 81a1 	bne.w	ae0 <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
     79e:	4b18      	ldr	r3, [pc, #96]	; (800 <usb_isr+0x278>)
     7a0:	491c      	ldr	r1, [pc, #112]	; (814 <usb_isr+0x28c>)
     7a2:	7818      	ldrb	r0, [r3, #0]
     7a4:	4b1c      	ldr	r3, [pc, #112]	; (818 <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
     7a6:	9201      	str	r2, [sp, #4]
     7a8:	2800      	cmp	r0, #0
     7aa:	bf18      	it	ne
     7ac:	4619      	movne	r1, r3
     7ae:	481b      	ldr	r0, [pc, #108]	; (81c <usb_isr+0x294>)
     7b0:	f000 fe44 	bl	143c <memcpy>
     7b4:	4d19      	ldr	r5, [pc, #100]	; (81c <usb_isr+0x294>)
     7b6:	9a01      	ldr	r2, [sp, #4]
     7b8:	e1e1      	b.n	b7e <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
     7ba:	f242 2121 	movw	r1, #8737	; 0x2221
     7be:	428b      	cmp	r3, r1
     7c0:	d07c      	beq.n	8bc <usb_isr+0x334>
     7c2:	d933      	bls.n	82c <usb_isr+0x2a4>
     7c4:	f242 3121 	movw	r1, #8993	; 0x2321
     7c8:	428b      	cmp	r3, r1
     7ca:	f000 8081 	beq.w	8d0 <usb_isr+0x348>
     7ce:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
     7d2:	428b      	cmp	r3, r1
     7d4:	f47f af29 	bne.w	62a <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
     7d8:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
     7dc:	b283      	uxth	r3, r0
     7de:	f47f af24 	bne.w	62a <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
     7e2:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
     7e6:	f363 0c0f 	bfi	ip, r3, #0, #16
     7ea:	e7b5      	b.n	758 <usb_isr+0x1d0>
     7ec:	402e0000 	.word	0x402e0000
     7f0:	20000000 	.word	0x20000000
     7f4:	200011fc 	.word	0x200011fc
     7f8:	2000128c 	.word	0x2000128c
     7fc:	20001290 	.word	0x20001290
     800:	200012a6 	.word	0x200012a6
     804:	200012a7 	.word	0x200012a7
     808:	200011f8 	.word	0x200011f8
     80c:	20001228 	.word	0x20001228
     810:	200005f0 	.word	0x200005f0
     814:	60001eb8 	.word	0x60001eb8
     818:	60001f1c 	.word	0x60001f1c
     81c:	20200000 	.word	0x20200000
     820:	200011f0 	.word	0x200011f0
     824:	b8c6cf5d 	.word	0xb8c6cf5d
     828:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
     82c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
     830:	d066      	beq.n	900 <usb_isr+0x378>
     832:	f242 0121 	movw	r1, #8225	; 0x2021
     836:	428b      	cmp	r3, r1
     838:	f47f aef7 	bne.w	62a <usb_isr+0xa2>
		if (setup.wLength != 7) break;
     83c:	0c03      	lsrs	r3, r0, #16
     83e:	2b07      	cmp	r3, #7
     840:	f47f aef3 	bne.w	62a <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
     844:	4bb2      	ldr	r3, [pc, #712]	; (b10 <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
     846:	49b3      	ldr	r1, [pc, #716]	; (b14 <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
     848:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
     84a:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
     84c:	49b2      	ldr	r1, [pc, #712]	; (b18 <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
     84e:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
     850:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
     854:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
     858:	2201      	movs	r2, #1
     85a:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     85c:	4aaf      	ldr	r2, [pc, #700]	; (b1c <usb_isr+0x594>)
     85e:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
     860:	4aaf      	ldr	r2, [pc, #700]	; (b20 <usb_isr+0x598>)
     862:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
     864:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
     868:	f041 0101 	orr.w	r1, r1, #1
     86c:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
     870:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
     874:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
     878:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
     87a:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
     87c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     880:	2b00      	cmp	r3, #0
     882:	d1fb      	bne.n	87c <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
     884:	4aa7      	ldr	r2, [pc, #668]	; (b24 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
     886:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
     888:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
     88a:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     88c:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
     88e:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     890:	f248 0380 	movw	r3, #32896	; 0x8080
     894:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     896:	f04f 1301 	mov.w	r3, #65537	; 0x10001
     89a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     89e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     8a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     8a6:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
     8aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
     8ae:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
     8b2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     8b6:	2b00      	cmp	r3, #0
     8b8:	d1fb      	bne.n	8b2 <usb_isr+0x32a>
     8ba:	e6ba      	b.n	632 <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
     8bc:	b280      	uxth	r0, r0
     8be:	b938      	cbnz	r0, 8d0 <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
     8c0:	4b99      	ldr	r3, [pc, #612]	; (b28 <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
     8c2:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
     8c6:	6819      	ldr	r1, [r3, #0]
     8c8:	4b98      	ldr	r3, [pc, #608]	; (b2c <usb_isr+0x5a4>)
     8ca:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
     8cc:	4b98      	ldr	r3, [pc, #608]	; (b30 <usb_isr+0x5a8>)
     8ce:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
     8d0:	4b94      	ldr	r3, [pc, #592]	; (b24 <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
     8d2:	2200      	movs	r2, #0
     8d4:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
     8d6:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
     8d8:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     8da:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
     8dc:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     8de:	2280      	movs	r2, #128	; 0x80
     8e0:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     8e2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
     8e6:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     8ea:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     8ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     8f2:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
     8f6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     8fa:	2b00      	cmp	r3, #0
     8fc:	d1fb      	bne.n	8f6 <usb_isr+0x36e>
     8fe:	e698      	b.n	632 <usb_isr+0xaa>
		usb_configuration = setup.wValue;
     900:	f3c2 4207 	ubfx	r2, r2, #16, #8
     904:	4b8b      	ldr	r3, [pc, #556]	; (b34 <usb_isr+0x5ac>)
     906:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
     908:	4b8b      	ldr	r3, [pc, #556]	; (b38 <usb_isr+0x5b0>)
     90a:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
     90e:	4b8b      	ldr	r3, [pc, #556]	; (b3c <usb_isr+0x5b4>)
     910:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
     914:	4b8a      	ldr	r3, [pc, #552]	; (b40 <usb_isr+0x5b8>)
     916:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
     91a:	f000 faeb 	bl	ef4 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
     91e:	2280      	movs	r2, #128	; 0x80
     920:	4629      	mov	r1, r5
     922:	4888      	ldr	r0, [pc, #544]	; (b44 <usb_isr+0x5bc>)
     924:	f000 ff88 	bl	1838 <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
     928:	4b87      	ldr	r3, [pc, #540]	; (b48 <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     92a:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
     92c:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
     930:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
     934:	4b7b      	ldr	r3, [pc, #492]	; (b24 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
     936:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     938:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
     93a:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     93c:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
     93e:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
     940:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     942:	f04f 1301 	mov.w	r3, #65537	; 0x10001
     946:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     94a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     94e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     952:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
     956:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
     95a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     95e:	2b00      	cmp	r3, #0
     960:	d1fb      	bne.n	95a <usb_isr+0x3d2>
     962:	e666      	b.n	632 <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
     964:	4b6f      	ldr	r3, [pc, #444]	; (b24 <usb_isr+0x59c>)
     966:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
     968:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
     96a:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     96c:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
     96e:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     970:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     972:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     974:	f04f 1301 	mov.w	r3, #65537	; 0x10001
     978:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     97c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     984:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
     988:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     98c:	2b00      	cmp	r3, #0
     98e:	d1fb      	bne.n	988 <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
     990:	0c13      	lsrs	r3, r2, #16
     992:	065b      	lsls	r3, r3, #25
     994:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
     998:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
     99c:	e649      	b.n	632 <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
     99e:	4b65      	ldr	r3, [pc, #404]	; (b34 <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
     9a0:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
     9a2:	486a      	ldr	r0, [pc, #424]	; (b4c <usb_isr+0x5c4>)
     9a4:	781b      	ldrb	r3, [r3, #0]
     9a6:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
     9a8:	f7ff fd8c 	bl	4c4 <endpoint0_transmit.constprop.0>
		return;
     9ac:	e641      	b.n	632 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
     9ae:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
     9b0:	f010 0078 	ands.w	r0, r0, #120	; 0x78
     9b4:	f47f ae39 	bne.w	62a <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
     9b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
     9bc:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
     9c0:	4a62      	ldr	r2, [pc, #392]	; (b4c <usb_isr+0x5c4>)
     9c2:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
     9c4:	0618      	lsls	r0, r3, #24
     9c6:	f100 809e 	bmi.w	b06 <usb_isr+0x57e>
     9ca:	07cb      	lsls	r3, r1, #31
     9cc:	d501      	bpl.n	9d2 <usb_isr+0x44a>
			reply_buffer[0] = 1;
     9ce:	2301      	movs	r3, #1
     9d0:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
     9d2:	2102      	movs	r1, #2
     9d4:	485d      	ldr	r0, [pc, #372]	; (b4c <usb_isr+0x5c4>)
     9d6:	f7ff fd75 	bl	4c4 <endpoint0_transmit.constprop.0>
		return;
     9da:	e62a      	b.n	632 <usb_isr+0xaa>
		if (endpoint > 7) break;
     9dc:	f010 0f78 	tst.w	r0, #120	; 0x78
     9e0:	b283      	uxth	r3, r0
     9e2:	f47f ae22 	bne.w	62a <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
     9e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
     9ea:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
     9ee:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
     9f2:	bf14      	ite	ne
     9f4:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
     9f8:	f043 0301 	orreq.w	r3, r3, #1
     9fc:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
     a00:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
     a02:	4b48      	ldr	r3, [pc, #288]	; (b24 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
     a04:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
     a06:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
     a08:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     a0a:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
     a0c:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     a0e:	2280      	movs	r2, #128	; 0x80
     a10:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     a12:	f04f 1301 	mov.w	r3, #65537	; 0x10001
     a16:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     a1a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     a1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     a22:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
     a26:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     a2a:	2b00      	cmp	r3, #0
     a2c:	d1fb      	bne.n	a26 <usb_isr+0x49e>
     a2e:	e600      	b.n	632 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
     a30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
     a34:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
     a38:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
     a3c:	bf14      	ite	ne
     a3e:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
     a42:	f023 0301 	biceq.w	r3, r3, #1
     a46:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
     a4a:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
     a4c:	4b35      	ldr	r3, [pc, #212]	; (b24 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
     a4e:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
     a50:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
     a52:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     a54:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
     a56:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     a58:	2280      	movs	r2, #128	; 0x80
     a5a:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     a5c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
     a60:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     a64:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     a6c:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
     a70:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     a74:	2b00      	cmp	r3, #0
     a76:	d1fb      	bne.n	a70 <usb_isr+0x4e8>
     a78:	e5db      	b.n	632 <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
     a7a:	2000      	movs	r0, #0
     a7c:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
     a7e:	4926      	ldr	r1, [pc, #152]	; (b18 <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
     a80:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
     a82:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
     a84:	f242 0121 	movw	r1, #8225	; 0x2021
     a88:	428c      	cmp	r4, r1
     a8a:	f47f ae25 	bne.w	6d8 <usb_isr+0x150>
     a8e:	b280      	uxth	r0, r0
     a90:	2800      	cmp	r0, #0
     a92:	f47f ae21 	bne.w	6d8 <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
     a96:	492e      	ldr	r1, [pc, #184]	; (b50 <usb_isr+0x5c8>)
     a98:	4c2e      	ldr	r4, [pc, #184]	; (b54 <usb_isr+0x5cc>)
     a9a:	c903      	ldmia	r1, {r0, r1}
     a9c:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
     a9e:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
     aa0:	ea4f 4111 	mov.w	r1, r1, lsr #16
     aa4:	6020      	str	r0, [r4, #0]
     aa6:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
     aa8:	f47f ae16 	bne.w	6d8 <usb_isr+0x150>
	__disable_irq();
     aac:	b672      	cpsid	i
	sof_usage |= (1 << interface);
     aae:	482a      	ldr	r0, [pc, #168]	; (b58 <usb_isr+0x5d0>)
     ab0:	7801      	ldrb	r1, [r0, #0]
     ab2:	f041 0108 	orr.w	r1, r1, #8
     ab6:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
     ab8:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
     abc:	060d      	lsls	r5, r1, #24
     abe:	d405      	bmi.n	acc <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
     ac0:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
     ac2:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
     ac4:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
     ac8:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
     acc:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
     ace:	4a23      	ldr	r2, [pc, #140]	; (b5c <usb_isr+0x5d4>)
     ad0:	2150      	movs	r1, #80	; 0x50
     ad2:	7011      	strb	r1, [r2, #0]
     ad4:	e600      	b.n	6d8 <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
     ad6:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
     ad8:	782a      	ldrb	r2, [r5, #0]
     ada:	4282      	cmp	r2, r0
     adc:	bf28      	it	cs
     ade:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
     ae0:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
     ae4:	d144      	bne.n	b70 <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
     ae6:	4b1e      	ldr	r3, [pc, #120]	; (b60 <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
     ae8:	4d1e      	ldr	r5, [pc, #120]	; (b64 <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
     aea:	7818      	ldrb	r0, [r3, #0]
     aec:	491e      	ldr	r1, [pc, #120]	; (b68 <usb_isr+0x5e0>)
     aee:	4b1f      	ldr	r3, [pc, #124]	; (b6c <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
     af0:	9201      	str	r2, [sp, #4]
     af2:	2800      	cmp	r0, #0
     af4:	bf18      	it	ne
     af6:	4619      	movne	r1, r3
     af8:	4628      	mov	r0, r5
     afa:	f000 fc9f 	bl	143c <memcpy>
					usb_descriptor_buffer[1] = 7;
     afe:	2307      	movs	r3, #7
     b00:	706b      	strb	r3, [r5, #1]
     b02:	9a01      	ldr	r2, [sp, #4]
     b04:	e03b      	b.n	b7e <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
     b06:	03c9      	lsls	r1, r1, #15
     b08:	f53f af61 	bmi.w	9ce <usb_isr+0x446>
     b0c:	e761      	b.n	9d2 <usb_isr+0x44a>
     b0e:	bf00      	nop
     b10:	20000ee0 	.word	0x20000ee0
     b14:	200021f0 	.word	0x200021f0
     b18:	20001080 	.word	0x20001080
     b1c:	00070080 	.word	0x00070080
     b20:	200031f0 	.word	0x200031f0
     b24:	20000ec0 	.word	0x20000ec0
     b28:	20001278 	.word	0x20001278
     b2c:	20001288 	.word	0x20001288
     b30:	200012a4 	.word	0x200012a4
     b34:	200012a5 	.word	0x200012a5
     b38:	00cc0002 	.word	0x00cc0002
     b3c:	000200c8 	.word	0x000200c8
     b40:	00c80002 	.word	0x00c80002
     b44:	20000080 	.word	0x20000080
     b48:	74d59319 	.word	0x74d59319
     b4c:	20001228 	.word	0x20001228
     b50:	200011f0 	.word	0x200011f0
     b54:	20001280 	.word	0x20001280
     b58:	200012a1 	.word	0x200012a1
     b5c:	200012a7 	.word	0x200012a7
     b60:	200012a6 	.word	0x200012a6
     b64:	20200000 	.word	0x20200000
     b68:	60001f1c 	.word	0x60001f1c
     b6c:	60001eb8 	.word	0x60001eb8
					memcpy(usb_descriptor_buffer, list->addr, datalen);
     b70:	4629      	mov	r1, r5
     b72:	4d10      	ldr	r5, [pc, #64]	; (bb4 <usb_isr+0x62c>)
     b74:	9201      	str	r2, [sp, #4]
     b76:	4628      	mov	r0, r5
     b78:	f000 fc60 	bl	143c <memcpy>
     b7c:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     b7e:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
     b82:	4415      	add	r5, r2
	asm("dsb");
     b84:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
     b88:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
     b8c:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
     b90:	3320      	adds	r3, #32
	} while (location < end_addr);
     b92:	429d      	cmp	r5, r3
     b94:	d8fa      	bhi.n	b8c <usb_isr+0x604>
	asm("dsb");
     b96:	f3bf 8f4f 	dsb	sy
	asm("isb");
     b9a:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
     b9e:	4805      	ldr	r0, [pc, #20]	; (bb4 <usb_isr+0x62c>)
     ba0:	4611      	mov	r1, r2
     ba2:	f7ff fc8f 	bl	4c4 <endpoint0_transmit.constprop.0>
				return;
     ba6:	e544      	b.n	632 <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
     ba8:	2003      	movs	r0, #3
     baa:	f7ff fcd7 	bl	55c <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
     bae:	f000 febf 	bl	1930 <___reboot_Teensyduino__veneer>
     bb2:	bf00      	nop
     bb4:	20200000 	.word	0x20200000

00000bb8 <usb_config_rx>:
{
     bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     bbc:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
     bbe:	1e83      	subs	r3, r0, #2
     bc0:	2b02      	cmp	r3, #2
     bc2:	d901      	bls.n	bc8 <usb_config_rx+0x10>
}
     bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
     bc8:	f8df 904c 	ldr.w	r9, [pc, #76]	; c18 <usb_config_rx+0x60>
     bcc:	4615      	mov	r5, r2
     bce:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
     bd0:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
     bd2:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
     bd6:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
     bd8:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
     bdc:	2100      	movs	r1, #0
     bde:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
     be2:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
     be4:	f000 fe28 	bl	1838 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
     be8:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
     bec:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
     bee:	0952      	lsrs	r2, r2, #5
     bf0:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
     bf4:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
     bf8:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
     bfc:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
     c00:	2f00      	cmp	r7, #0
     c02:	d0df      	beq.n	bc4 <usb_config_rx+0xc>
     c04:	4a03      	ldr	r2, [pc, #12]	; (c14 <usb_config_rx+0x5c>)
     c06:	40b3      	lsls	r3, r6
     c08:	6811      	ldr	r1, [r2, #0]
     c0a:	430b      	orrs	r3, r1
     c0c:	6013      	str	r3, [r2, #0]
}
     c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     c12:	bf00      	nop
     c14:	200011fc 	.word	0x200011fc
     c18:	20000000 	.word	0x20000000

00000c1c <usb_config_tx>:
{
     c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     c20:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
     c22:	1e81      	subs	r1, r0, #2
     c24:	2902      	cmp	r1, #2
     c26:	d901      	bls.n	c2c <usb_config_tx+0x10>
}
     c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
     c2c:	01c7      	lsls	r7, r0, #7
     c2e:	f8df 904c 	ldr.w	r9, [pc, #76]	; c7c <usb_config_tx+0x60>
     c32:	4692      	mov	sl, r2
     c34:	4604      	mov	r4, r0
     c36:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
     c38:	223c      	movs	r2, #60	; 0x3c
     c3a:	2100      	movs	r1, #0
     c3c:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
     c3e:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
     c42:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
     c44:	f108 0004 	add.w	r0, r8, #4
     c48:	f000 fdf6 	bl	1838 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
     c4c:	faba f28a 	clz	r2, sl
     c50:	0952      	lsrs	r2, r2, #5
     c52:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
     c56:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
     c5a:	2201      	movs	r2, #1
	qh->callback_function = callback;
     c5c:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
     c60:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
     c64:	2e00      	cmp	r6, #0
     c66:	d0df      	beq.n	c28 <usb_config_tx+0xc>
     c68:	4b03      	ldr	r3, [pc, #12]	; (c78 <usb_config_tx+0x5c>)
     c6a:	3410      	adds	r4, #16
     c6c:	6819      	ldr	r1, [r3, #0]
     c6e:	40a2      	lsls	r2, r4
     c70:	430a      	orrs	r2, r1
     c72:	601a      	str	r2, [r3, #0]
}
     c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     c78:	200011fc 	.word	0x200011fc
     c7c:	20000000 	.word	0x20000000

00000c80 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
     c80:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
     c82:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
     c84:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
     c86:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
     c8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
     c8e:	b410      	push	{r4}
	transfer->next = 1;
     c90:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
     c92:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
     c94:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
     c98:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
     c9a:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
     c9e:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
     ca2:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
     ca4:	6181      	str	r1, [r0, #24]
}
     ca6:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
     caa:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
     cae:	4770      	bx	lr

00000cb0 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
     cb0:	1e83      	subs	r3, r0, #2
{
     cb2:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
     cb4:	2b02      	cmp	r3, #2
     cb6:	d900      	bls.n	cba <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
     cb8:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
     cba:	4b06      	ldr	r3, [pc, #24]	; (cd4 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
     cbc:	f100 0110 	add.w	r1, r0, #16
     cc0:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
     cc4:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
     cc8:	fa0c f101 	lsl.w	r1, ip, r1
     ccc:	3040      	adds	r0, #64	; 0x40
     cce:	f7ff bb99 	b.w	404 <schedule_transfer>
     cd2:	bf00      	nop
     cd4:	20000000 	.word	0x20000000

00000cd8 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
     cd8:	1e83      	subs	r3, r0, #2
{
     cda:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
     cdc:	2b02      	cmp	r3, #2
     cde:	d900      	bls.n	ce2 <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
     ce0:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
     ce2:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
     ce4:	4b02      	ldr	r3, [pc, #8]	; (cf0 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
     ce6:	4081      	lsls	r1, r0
     ce8:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
     cec:	f7ff bb8a 	b.w	404 <schedule_transfer>
     cf0:	20000000 	.word	0x20000000

00000cf4 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
     cf4:	4a12      	ldr	r2, [pc, #72]	; (d40 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
     cf6:	4b13      	ldr	r3, [pc, #76]	; (d44 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
     cf8:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
     cfc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
     d00:	4298      	cmp	r0, r3
{
     d02:	b510      	push	{r4, lr}
     d04:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
     d06:	d202      	bcs.n	d0e <usb_init_serialnumber+0x1a>
     d08:	eb00 0080 	add.w	r0, r0, r0, lsl #2
     d0c:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
     d0e:	4c0e      	ldr	r4, [pc, #56]	; (d48 <usb_init_serialnumber+0x54>)
     d10:	a901      	add	r1, sp, #4
     d12:	220a      	movs	r2, #10
     d14:	f000 fc2c 	bl	1570 <ultoa>
	for (i=0; i<10; i++) {
     d18:	a901      	add	r1, sp, #4
     d1a:	2300      	movs	r3, #0
     d1c:	4620      	mov	r0, r4
		char c = buf[i];
     d1e:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
     d22:	3301      	adds	r3, #1
		if (!c) break;
     d24:	b13a      	cbz	r2, d36 <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
     d26:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
     d28:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
     d2c:	d1f7      	bne.n	d1e <usb_init_serialnumber+0x2a>
     d2e:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
     d30:	7023      	strb	r3, [r4, #0]
}
     d32:	b004      	add	sp, #16
     d34:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
     d36:	005b      	lsls	r3, r3, #1
     d38:	b2db      	uxtb	r3, r3
     d3a:	7023      	strb	r3, [r4, #0]
}
     d3c:	b004      	add	sp, #16
     d3e:	bd10      	pop	{r4, pc}
     d40:	401f4400 	.word	0x401f4400
     d44:	00989680 	.word	0x00989680
     d48:	200007f4 	.word	0x200007f4

00000d4c <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
     d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
     d4e:	4c14      	ldr	r4, [pc, #80]	; (da0 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
     d50:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     d54:	4e13      	ldr	r6, [pc, #76]	; (da4 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
     d56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
     d5a:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     d5e:	4f12      	ldr	r7, [pc, #72]	; (da8 <rx_queue_transfer+0x5c>)
     d60:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
     d64:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
     d66:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     d6a:	4621      	mov	r1, r4
     d6c:	883a      	ldrh	r2, [r7, #0]
     d6e:	4630      	mov	r0, r6
     d70:	f7ff ff86 	bl	c80 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
     d74:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
     d76:	4423      	add	r3, r4
	asm("dsb");
     d78:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
     d7c:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
     d80:	3420      	adds	r4, #32
	} while (location < end_addr);
     d82:	42a3      	cmp	r3, r4
     d84:	d8fa      	bhi.n	d7c <rx_queue_transfer+0x30>
	asm("dsb");
     d86:	f3bf 8f4f 	dsb	sy
	asm("isb");
     d8a:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
     d8e:	2003      	movs	r0, #3
     d90:	4631      	mov	r1, r6
     d92:	f7ff ffa1 	bl	cd8 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
     d96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
     d9a:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
     d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     da0:	20200080 	.word	0x20200080
     da4:	20000f00 	.word	0x20000f00
     da8:	20001294 	.word	0x20001294

00000dac <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
     dac:	4b24      	ldr	r3, [pc, #144]	; (e40 <rx_event+0x94>)
{
     dae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
     db2:	881c      	ldrh	r4, [r3, #0]
     db4:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
     db6:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
     db8:	f3c3 430e 	ubfx	r3, r3, #16, #15
     dbc:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
     dbe:	2c00      	cmp	r4, #0
     dc0:	dd24      	ble.n	e0c <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
     dc2:	4920      	ldr	r1, [pc, #128]	; (e44 <rx_event+0x98>)
		if (head != rx_tail) {
     dc4:	4820      	ldr	r0, [pc, #128]	; (e48 <rx_event+0x9c>)
		uint32_t head = rx_head;
     dc6:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
     dc8:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
     dca:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
     dcc:	4e1f      	ldr	r6, [pc, #124]	; (e4c <rx_event+0xa0>)
		if (head != rx_tail) {
     dce:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
     dd0:	481f      	ldr	r0, [pc, #124]	; (e50 <rx_event+0xa4>)
		if (head != rx_tail) {
     dd2:	d007      	beq.n	de4 <rx_event+0x38>
			uint32_t ii = rx_list[head];
     dd4:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
     dd8:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
     ddc:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
     de0:	4294      	cmp	r4, r2
     de2:	d918      	bls.n	e16 <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
     de4:	3301      	adds	r3, #1
		rx_index[i] = 0;
     de6:	2200      	movs	r2, #0
		rx_count[i] = len;
     de8:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
     dec:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
     dee:	4e19      	ldr	r6, [pc, #100]	; (e54 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
     df0:	bf88      	it	hi
     df2:	4613      	movhi	r3, r2
		rx_index[i] = 0;
     df4:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
     df8:	bf98      	it	ls
     dfa:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
     dfc:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
     dfe:	4b16      	ldr	r3, [pc, #88]	; (e58 <rx_event+0xac>)
		rx_head = head;
     e00:	700a      	strb	r2, [r1, #0]
		rx_available += len;
     e02:	681a      	ldr	r2, [r3, #0]
     e04:	4414      	add	r4, r2
     e06:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
     e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
     e0c:	4628      	mov	r0, r5
}
     e0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
     e12:	f7ff bf9b 	b.w	d4c <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
     e16:	eb07 2048 	add.w	r0, r7, r8, lsl #9
     e1a:	4910      	ldr	r1, [pc, #64]	; (e5c <rx_event+0xb0>)
     e1c:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
     e1e:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
     e20:	4408      	add	r0, r1
     e22:	eb01 2145 	add.w	r1, r1, r5, lsl #9
     e26:	f000 fb09 	bl	143c <memcpy>
				rx_available += len;
     e2a:	4a0b      	ldr	r2, [pc, #44]	; (e58 <rx_event+0xac>)
				rx_queue_transfer(i);
     e2c:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
     e2e:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
     e32:	6813      	ldr	r3, [r2, #0]
     e34:	4423      	add	r3, r4
}
     e36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
     e3a:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
     e3c:	f7ff bf86 	b.w	d4c <rx_queue_transfer>
     e40:	20001294 	.word	0x20001294
     e44:	2000129f 	.word	0x2000129f
     e48:	200012a0 	.word	0x200012a0
     e4c:	20001234 	.word	0x20001234
     e50:	20001254 	.word	0x20001254
     e54:	20001244 	.word	0x20001244
     e58:	20001230 	.word	0x20001230
     e5c:	20200080 	.word	0x20200080

00000e60 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
     e60:	4b1d      	ldr	r3, [pc, #116]	; (ed8 <usb_serial_flush_callback+0x78>)
     e62:	781a      	ldrb	r2, [r3, #0]
     e64:	2a00      	cmp	r2, #0
     e66:	d136      	bne.n	ed6 <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
     e68:	f002 03ff 	and.w	r3, r2, #255	; 0xff
     e6c:	4a1b      	ldr	r2, [pc, #108]	; (edc <usb_serial_flush_callback+0x7c>)
     e6e:	7812      	ldrb	r2, [r2, #0]
     e70:	b38a      	cbz	r2, ed6 <usb_serial_flush_callback+0x76>
{
     e72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
     e76:	4d1a      	ldr	r5, [pc, #104]	; (ee0 <usb_serial_flush_callback+0x80>)
     e78:	882a      	ldrh	r2, [r5, #0]
     e7a:	b352      	cbz	r2, ed2 <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
     e7c:	4e19      	ldr	r6, [pc, #100]	; (ee4 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
     e7e:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
     e82:	4f19      	ldr	r7, [pc, #100]	; (ee8 <usb_serial_flush_callback+0x88>)
     e84:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     e86:	4c19      	ldr	r4, [pc, #100]	; (eec <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
     e88:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     e8c:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     e90:	4642      	mov	r2, r8
     e92:	4638      	mov	r0, r7
     e94:	4621      	mov	r1, r4
     e96:	f7ff fef3 	bl	c80 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
     e9a:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
     e9e:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
     ea2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     ea6:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
     eaa:	3420      	adds	r4, #32
	} while (location < end_addr);
     eac:	42a2      	cmp	r2, r4
     eae:	d8fa      	bhi.n	ea6 <usb_serial_flush_callback+0x46>
	asm("dsb");
     eb0:	f3bf 8f4f 	dsb	sy
	asm("isb");
     eb4:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
     eb8:	2004      	movs	r0, #4
     eba:	4639      	mov	r1, r7
     ebc:	f7ff fef8 	bl	cb0 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
     ec0:	7833      	ldrb	r3, [r6, #0]
     ec2:	3301      	adds	r3, #1
     ec4:	b2db      	uxtb	r3, r3
     ec6:	2b03      	cmp	r3, #3
     ec8:	bf88      	it	hi
     eca:	2300      	movhi	r3, #0
     ecc:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
     ece:	2300      	movs	r3, #0
     ed0:	802b      	strh	r3, [r5, #0]
}
     ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     ed6:	4770      	bx	lr
     ed8:	200012a3 	.word	0x200012a3
     edc:	200012a5 	.word	0x200012a5
     ee0:	20001296 	.word	0x20001296
     ee4:	200012a2 	.word	0x200012a2
     ee8:	20001000 	.word	0x20001000
     eec:	20201080 	.word	0x20201080

00000ef0 <usb_serial_reset>:
}
     ef0:	4770      	bx	lr
     ef2:	bf00      	nop

00000ef4 <usb_serial_configure>:
	if (usb_high_speed) {
     ef4:	4b2d      	ldr	r3, [pc, #180]	; (fac <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
     ef6:	2100      	movs	r1, #0
     ef8:	2280      	movs	r2, #128	; 0x80
     efa:	482d      	ldr	r0, [pc, #180]	; (fb0 <usb_serial_configure+0xbc>)
{
     efc:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
     efe:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
     f00:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
     f02:	4d2c      	ldr	r5, [pc, #176]	; (fb4 <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
     f04:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
     f06:	4e2c      	ldr	r6, [pc, #176]	; (fb8 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
     f08:	bf0c      	ite	eq
     f0a:	2340      	moveq	r3, #64	; 0x40
     f0c:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
     f10:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
     f12:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
     f14:	f000 fc90 	bl	1838 <memset>
	tx_head = 0;
     f18:	4a28      	ldr	r2, [pc, #160]	; (fbc <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
     f1a:	4621      	mov	r1, r4
	tx_available = 0;
     f1c:	4b28      	ldr	r3, [pc, #160]	; (fc0 <usb_serial_configure+0xcc>)
	tx_head = 0;
     f1e:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
     f20:	f44f 7280 	mov.w	r2, #256	; 0x100
     f24:	4827      	ldr	r0, [pc, #156]	; (fc4 <usb_serial_configure+0xd0>)
	tx_available = 0;
     f26:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
     f28:	f000 fc86 	bl	1838 <memset>
	memset(rx_count, 0, sizeof(rx_count));
     f2c:	4a26      	ldr	r2, [pc, #152]	; (fc8 <usb_serial_configure+0xd4>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     f2e:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
     f30:	4b26      	ldr	r3, [pc, #152]	; (fcc <usb_serial_configure+0xd8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     f32:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
     f34:	e9c2 4400 	strd	r4, r4, [r2]
     f38:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
     f3c:	4a24      	ldr	r2, [pc, #144]	; (fd0 <usb_serial_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
     f3e:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
     f42:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
     f44:	4a23      	ldr	r2, [pc, #140]	; (fd4 <usb_serial_configure+0xe0>)
	memset(rx_index, 0, sizeof(rx_index));
     f46:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
     f4a:	4b23      	ldr	r3, [pc, #140]	; (fd8 <usb_serial_configure+0xe4>)
     f4c:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     f4e:	4623      	mov	r3, r4
	rx_available = 0;
     f50:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     f52:	4622      	mov	r2, r4
     f54:	f7ff fe62 	bl	c1c <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
     f58:	4622      	mov	r2, r4
     f5a:	8831      	ldrh	r1, [r6, #0]
     f5c:	2003      	movs	r0, #3
     f5e:	4b1f      	ldr	r3, [pc, #124]	; (fdc <usb_serial_configure+0xe8>)
     f60:	f7ff fe2a 	bl	bb8 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
     f64:	4623      	mov	r3, r4
     f66:	2201      	movs	r2, #1
     f68:	8829      	ldrh	r1, [r5, #0]
     f6a:	2004      	movs	r0, #4
     f6c:	f7ff fe56 	bl	c1c <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
     f70:	4620      	mov	r0, r4
     f72:	3401      	adds	r4, #1
     f74:	f7ff feea 	bl	d4c <rx_queue_transfer>
     f78:	2c08      	cmp	r4, #8
     f7a:	d1f9      	bne.n	f70 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
     f7c:	4b18      	ldr	r3, [pc, #96]	; (fe0 <usb_serial_configure+0xec>)
     f7e:	2100      	movs	r1, #0
	USB1_GPTIMER0LD = microseconds - 1;
     f80:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
     f82:	4818      	ldr	r0, [pc, #96]	; (fe4 <usb_serial_configure+0xf0>)
     f84:	4c18      	ldr	r4, [pc, #96]	; (fe8 <usb_serial_configure+0xf4>)
     f86:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
     f88:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
     f8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
     f90:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
     f94:	4915      	ldr	r1, [pc, #84]	; (fec <usb_serial_configure+0xf8>)
	USB1_USBINTR |= USB_USBINTR_TIE0;
     f96:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     f9a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
     f9e:	b121      	cbz	r1, faa <usb_serial_configure+0xb6>
     fa0:	4a13      	ldr	r2, [pc, #76]	; (ff0 <usb_serial_configure+0xfc>)
     fa2:	7813      	ldrb	r3, [r2, #0]
     fa4:	f043 0301 	orr.w	r3, r3, #1
     fa8:	7013      	strb	r3, [r2, #0]
}
     faa:	bd70      	pop	{r4, r5, r6, pc}
     fac:	200012a6 	.word	0x200012a6
     fb0:	20001000 	.word	0x20001000
     fb4:	20001298 	.word	0x20001298
     fb8:	20001294 	.word	0x20001294
     fbc:	200012a2 	.word	0x200012a2
     fc0:	20001296 	.word	0x20001296
     fc4:	20000f00 	.word	0x20000f00
     fc8:	20001234 	.word	0x20001234
     fcc:	20001244 	.word	0x20001244
     fd0:	2000129f 	.word	0x2000129f
     fd4:	20001230 	.word	0x20001230
     fd8:	200012a0 	.word	0x200012a0
     fdc:	00000dad 	.word	0x00000dad
     fe0:	402e0000 	.word	0x402e0000
     fe4:	2000128c 	.word	0x2000128c
     fe8:	00000e61 	.word	0x00000e61
     fec:	00000000 	.word	0x00000000
     ff0:	200012a8 	.word	0x200012a8

00000ff4 <usb_serial_available>:
	uint32_t n = rx_available;
     ff4:	4b04      	ldr	r3, [pc, #16]	; (1008 <usb_serial_available+0x14>)
{
     ff6:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
     ff8:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
     ffa:	b10c      	cbz	r4, 1000 <usb_serial_available+0xc>
}
     ffc:	4620      	mov	r0, r4
     ffe:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    1000:	f000 f804 	bl	100c <yield>
}
    1004:	4620      	mov	r0, r4
    1006:	bd10      	pop	{r4, pc}
    1008:	20001230 	.word	0x20001230

0000100c <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    100c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    1010:	4b2d      	ldr	r3, [pc, #180]	; (10c8 <yield+0xbc>)
    1012:	781e      	ldrb	r6, [r3, #0]
	if (!check_flags) return;	// nothing to do
    1014:	b166      	cbz	r6, 1030 <yield+0x24>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    1016:	4f2d      	ldr	r7, [pc, #180]	; (10cc <yield+0xc0>)
    1018:	783b      	ldrb	r3, [r7, #0]
    101a:	b94b      	cbnz	r3, 1030 <yield+0x24>
	running = 1;
    101c:	2301      	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    101e:	07f1      	lsls	r1, r6, #31
	running = 1;
    1020:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    1022:	d443      	bmi.n	10ac <yield+0xa0>
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    1024:	07b2      	lsls	r2, r6, #30
    1026:	d426      	bmi.n	1076 <yield+0x6a>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    1028:	2300      	movs	r3, #0
    102a:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    102c:	0773      	lsls	r3, r6, #29
    102e:	d401      	bmi.n	1034 <yield+0x28>
		EventResponder::runFromYield();
	}
};
    1030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    1034:	4b26      	ldr	r3, [pc, #152]	; (10d0 <yield+0xc4>)
    1036:	681a      	ldr	r2, [r3, #0]
    1038:	2a00      	cmp	r2, #0
    103a:	d0f9      	beq.n	1030 <yield+0x24>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    103c:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    1040:	2a00      	cmp	r2, #0
    1042:	d1f5      	bne.n	1030 <yield+0x24>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1044:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    1048:	b672      	cpsid	i
		EventResponder *first = firstYield;
    104a:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    104c:	2800      	cmp	r0, #0
    104e:	d034      	beq.n	10ba <yield+0xae>
		if (runningFromYield) {
    1050:	4c20      	ldr	r4, [pc, #128]	; (10d4 <yield+0xc8>)
    1052:	7821      	ldrb	r1, [r4, #0]
    1054:	2900      	cmp	r1, #0
    1056:	d130      	bne.n	10ba <yield+0xae>
		runningFromYield = true;
    1058:	2201      	movs	r2, #1
    105a:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    105c:	6942      	ldr	r2, [r0, #20]
    105e:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    1060:	2a00      	cmp	r2, #0
    1062:	d02e      	beq.n	10c2 <yield+0xb6>
			firstYield->_prev = nullptr;
    1064:	6191      	str	r1, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    1066:	b905      	cbnz	r5, 106a <yield+0x5e>
    1068:	b662      	cpsie	i
		first->_triggered = false;
    106a:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    106c:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    106e:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    1070:	4798      	blx	r3
		runningFromYield = false;
    1072:	7025      	strb	r5, [r4, #0]
    1074:	e7dc      	b.n	1030 <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    1076:	f8df 8064 	ldr.w	r8, [pc, #100]	; 10dc <yield+0xd0>
    107a:	f898 3000 	ldrb.w	r3, [r8]
    107e:	2b00      	cmp	r3, #0
    1080:	d0d2      	beq.n	1028 <yield+0x1c>
    1082:	2500      	movs	r5, #0
    1084:	f8df 9058 	ldr.w	r9, [pc, #88]	; 10e0 <yield+0xd4>
    1088:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    108a:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    108e:	3501      	adds	r5, #1
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    1090:	6823      	ldr	r3, [r4, #0]
    1092:	4620      	mov	r0, r4
    1094:	691b      	ldr	r3, [r3, #16]
    1096:	4798      	blx	r3
    1098:	b110      	cbz	r0, 10a0 <yield+0x94>
    109a:	6963      	ldr	r3, [r4, #20]
    109c:	689b      	ldr	r3, [r3, #8]
    109e:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    10a0:	f898 2000 	ldrb.w	r2, [r8]
    10a4:	b2eb      	uxtb	r3, r5
    10a6:	429a      	cmp	r2, r3
    10a8:	d8ef      	bhi.n	108a <yield+0x7e>
    10aa:	e7bd      	b.n	1028 <yield+0x1c>
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
    10ac:	f7ff ffa2 	bl	ff4 <usb_serial_available>
		if (Serial.available()) serialEvent();
    10b0:	2800      	cmp	r0, #0
    10b2:	d0b7      	beq.n	1024 <yield+0x18>
    10b4:	f3af 8000 	nop.w
    10b8:	e7b4      	b.n	1024 <yield+0x18>
		if (doit) __enable_irq();
    10ba:	2d00      	cmp	r5, #0
    10bc:	d1b8      	bne.n	1030 <yield+0x24>
    10be:	b662      	cpsie	i
    10c0:	e7b6      	b.n	1030 <yield+0x24>
			lastYield = nullptr;
    10c2:	4b05      	ldr	r3, [pc, #20]	; (10d8 <yield+0xcc>)
    10c4:	601a      	str	r2, [r3, #0]
    10c6:	e7ce      	b.n	1066 <yield+0x5a>
    10c8:	200012a8 	.word	0x200012a8
    10cc:	2000129c 	.word	0x2000129c
    10d0:	20001088 	.word	0x20001088
    10d4:	2000129a 	.word	0x2000129a
    10d8:	20001094 	.word	0x20001094
    10dc:	2000129b 	.word	0x2000129b
    10e0:	20001098 	.word	0x20001098

000010e4 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    10e4:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    10e6:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    10ea:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    10ec:	4c0c      	ldr	r4, [pc, #48]	; (1120 <EventResponder::runFromInterrupt()+0x3c>)
    10ee:	6820      	ldr	r0, [r4, #0]
		if (first) {
    10f0:	b180      	cbz	r0, 1114 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    10f2:	4e0c      	ldr	r6, [pc, #48]	; (1124 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    10f4:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    10f6:	6943      	ldr	r3, [r0, #20]
    10f8:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    10fa:	b173      	cbz	r3, 111a <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    10fc:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    10fe:	b902      	cbnz	r2, 1102 <EventResponder::runFromInterrupt()+0x1e>
    1100:	b662      	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    1102:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    1104:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    1106:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1108:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    110c:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    110e:	6820      	ldr	r0, [r4, #0]
		if (first) {
    1110:	2800      	cmp	r0, #0
    1112:	d1f0      	bne.n	10f6 <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    1114:	b902      	cbnz	r2, 1118 <EventResponder::runFromInterrupt()+0x34>
    1116:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    1118:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    111a:	6033      	str	r3, [r6, #0]
    111c:	e7ef      	b.n	10fe <EventResponder::runFromInterrupt()+0x1a>
    111e:	bf00      	nop
    1120:	20001090 	.word	0x20001090
    1124:	2000108c 	.word	0x2000108c

00001128 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    1128:	f7ff bfdc 	b.w	10e4 <EventResponder::runFromInterrupt()>

0000112c <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    112c:	4904      	ldr	r1, [pc, #16]	; (1140 <systick_isr+0x14>)
	systick_millis_count++;
    112e:	4a05      	ldr	r2, [pc, #20]	; (1144 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    1130:	6849      	ldr	r1, [r1, #4]
    1132:	4b05      	ldr	r3, [pc, #20]	; (1148 <systick_isr+0x1c>)
    1134:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    1136:	6813      	ldr	r3, [r2, #0]
    1138:	3301      	adds	r3, #1
    113a:	6013      	str	r3, [r2, #0]
}
    113c:	4770      	bx	lr
    113e:	bf00      	nop
    1140:	e0001000 	.word	0xe0001000
    1144:	20001278 	.word	0x20001278
    1148:	20001274 	.word	0x20001274

0000114c <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    114c:	49a2      	ldr	r1, [pc, #648]	; (13d8 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    114e:	4ba3      	ldr	r3, [pc, #652]	; (13dc <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    1150:	4288      	cmp	r0, r1
{
    1152:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    1156:	4ca2      	ldr	r4, [pc, #648]	; (13e0 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    1158:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    115a:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    115c:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    1160:	d91b      	bls.n	119a <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    1162:	4ba0      	ldr	r3, [pc, #640]	; (13e4 <set_arm_clock+0x298>)
    1164:	4298      	cmp	r0, r3
    1166:	f240 8102 	bls.w	136e <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    116a:	1ac3      	subs	r3, r0, r3
    116c:	499e      	ldr	r1, [pc, #632]	; (13e8 <set_arm_clock+0x29c>)
    116e:	0a1b      	lsrs	r3, r3, #8
    1170:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    1174:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    1178:	09db      	lsrs	r3, r3, #7
    117a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    117e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1182:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    1186:	428b      	cmp	r3, r1
    1188:	bf28      	it	cs
    118a:	460b      	movcs	r3, r1
    118c:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    1190:	4b96      	ldr	r3, [pc, #600]	; (13ec <set_arm_clock+0x2a0>)
    1192:	fba3 3707 	umull	r3, r7, r3, r7
    1196:	08ff      	lsrs	r7, r7, #3
    1198:	e004      	b.n	11a4 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    119a:	4f95      	ldr	r7, [pc, #596]	; (13f0 <set_arm_clock+0x2a4>)
    119c:	42b8      	cmp	r0, r7
    119e:	bf8c      	ite	hi
    11a0:	270e      	movhi	r7, #14
    11a2:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    11a4:	498d      	ldr	r1, [pc, #564]	; (13dc <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    11a6:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    11aa:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    11ae:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    11b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    11b4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    11b8:	d20c      	bcs.n	11d4 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    11ba:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    11be:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    11c2:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    11c6:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    11ca:	680b      	ldr	r3, [r1, #0]
    11cc:	2b00      	cmp	r3, #0
    11ce:	dafc      	bge.n	11ca <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    11d0:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    11d4:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    11d8:	d124      	bne.n	1224 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    11da:	4986      	ldr	r1, [pc, #536]	; (13f4 <set_arm_clock+0x2a8>)
    11dc:	690c      	ldr	r4, [r1, #16]
    11de:	4986      	ldr	r1, [pc, #536]	; (13f8 <set_arm_clock+0x2ac>)
    11e0:	43a1      	bics	r1, r4
    11e2:	f000 80ea 	beq.w	13ba <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    11e6:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    11ea:	4634      	mov	r4, r6
    11ec:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    11f0:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    11f4:	d004      	beq.n	1200 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    11f6:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    11fa:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    11fc:	4b77      	ldr	r3, [pc, #476]	; (13dc <set_arm_clock+0x290>)
    11fe:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    1200:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    1204:	d007      	beq.n	1216 <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    1206:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    120a:	4974      	ldr	r1, [pc, #464]	; (13dc <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    120c:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    120e:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    1210:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    1212:	071a      	lsls	r2, r3, #28
    1214:	d4fc      	bmi.n	1210 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    1216:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    121a:	4a70      	ldr	r2, [pc, #448]	; (13dc <set_arm_clock+0x290>)
    121c:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    121e:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1220:	069b      	lsls	r3, r3, #26
    1222:	d4fc      	bmi.n	121e <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    1224:	4c75      	ldr	r4, [pc, #468]	; (13fc <set_arm_clock+0x2b0>)
    1226:	42a0      	cmp	r0, r4
    1228:	f200 80ce 	bhi.w	13c8 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    122c:	f04f 0c01 	mov.w	ip, #1
    1230:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    1232:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    1234:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    1238:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    123c:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    1240:	42a2      	cmp	r2, r4
    1242:	d818      	bhi.n	1276 <set_arm_clock+0x12a>
		if (div_arm < 8) {
    1244:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    1248:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    124c:	f040 808d 	bne.w	136a <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    1250:	f1bc 0f04 	cmp.w	ip, #4
    1254:	f200 8091 	bhi.w	137a <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    1258:	180a      	adds	r2, r1, r0
    125a:	42a2      	cmp	r2, r4
    125c:	f200 80a4 	bhi.w	13a8 <set_arm_clock+0x25c>
    1260:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    1264:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    1266:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    126a:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    126e:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    1272:	42a2      	cmp	r2, r4
    1274:	d9e6      	bls.n	1244 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    1276:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    127a:	028c      	lsls	r4, r1, #10
    127c:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    1280:	485f      	ldr	r0, [pc, #380]	; (1400 <set_arm_clock+0x2b4>)
    1282:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    1284:	4a5f      	ldr	r2, [pc, #380]	; (1404 <set_arm_clock+0x2b8>)
    1286:	4290      	cmp	r0, r2
    1288:	d97f      	bls.n	138a <set_arm_clock+0x23e>
    128a:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 1430 <set_arm_clock+0x2e4>
    128e:	226c      	movs	r2, #108	; 0x6c
    1290:	485d      	ldr	r0, [pc, #372]	; (1408 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    1292:	4d58      	ldr	r5, [pc, #352]	; (13f4 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    1294:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    1298:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    129c:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    12a0:	f8df c190 	ldr.w	ip, [pc, #400]	; 1434 <set_arm_clock+0x2e8>
    12a4:	ea0e 0c0c 	and.w	ip, lr, ip
    12a8:	45d4      	cmp	ip, sl
    12aa:	d009      	beq.n	12c0 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    12ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    12b0:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    12b4:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    12b8:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    12ba:	682a      	ldr	r2, [r5, #0]
    12bc:	2a00      	cmp	r2, #0
    12be:	dafc      	bge.n	12ba <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    12c0:	4a46      	ldr	r2, [pc, #280]	; (13dc <set_arm_clock+0x290>)
    12c2:	6915      	ldr	r5, [r2, #16]
    12c4:	f005 0507 	and.w	r5, r5, #7
    12c8:	429d      	cmp	r5, r3
    12ca:	d003      	beq.n	12d4 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    12cc:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    12ce:	6c93      	ldr	r3, [r2, #72]	; 0x48
    12d0:	03dd      	lsls	r5, r3, #15
    12d2:	d4fc      	bmi.n	12ce <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    12d4:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    12d8:	d009      	beq.n	12ee <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    12da:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    12de:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    12e2:	4a3e      	ldr	r2, [pc, #248]	; (13dc <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    12e4:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    12e6:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    12e8:	6c93      	ldr	r3, [r2, #72]	; 0x48
    12ea:	0799      	lsls	r1, r3, #30
    12ec:	d4fc      	bmi.n	12e8 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    12ee:	4947      	ldr	r1, [pc, #284]	; (140c <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    12f0:	4a47      	ldr	r2, [pc, #284]	; (1410 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    12f2:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    12f4:	4291      	cmp	r1, r2
    12f6:	d83c      	bhi.n	1372 <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    12f8:	4b46      	ldr	r3, [pc, #280]	; (1414 <set_arm_clock+0x2c8>)
    12fa:	09c9      	lsrs	r1, r1, #7
    12fc:	fba3 3101 	umull	r3, r1, r3, r1
    1300:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    1302:	1e4b      	subs	r3, r1, #1
    1304:	021b      	lsls	r3, r3, #8
    1306:	ea86 0203 	eor.w	r2, r6, r3
    130a:	f412 7f40 	tst.w	r2, #768	; 0x300
    130e:	d006      	beq.n	131e <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    1310:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    1314:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    1318:	4a30      	ldr	r2, [pc, #192]	; (13dc <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    131a:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    131c:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    131e:	4a2f      	ldr	r2, [pc, #188]	; (13dc <set_arm_clock+0x290>)
    1320:	6953      	ldr	r3, [r2, #20]
    1322:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    1326:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    1328:	6c93      	ldr	r3, [r2, #72]	; 0x48
    132a:	069b      	lsls	r3, r3, #26
    132c:	d4fc      	bmi.n	1328 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    132e:	4b3a      	ldr	r3, [pc, #232]	; (1418 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    1330:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    1332:	fba3 2300 	umull	r2, r3, r3, r0
    1336:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    133a:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    133e:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    1342:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    1346:	4a35      	ldr	r2, [pc, #212]	; (141c <set_arm_clock+0x2d0>)
    1348:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    134a:	4a35      	ldr	r2, [pc, #212]	; (1420 <set_arm_clock+0x2d4>)
    134c:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    134e:	4a35      	ldr	r2, [pc, #212]	; (1424 <set_arm_clock+0x2d8>)
    1350:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    1352:	d208      	bcs.n	1366 <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    1354:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    1358:	4a21      	ldr	r2, [pc, #132]	; (13e0 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    135a:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    135e:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    1360:	6813      	ldr	r3, [r2, #0]
    1362:	2b00      	cmp	r3, #0
    1364:	dafc      	bge.n	1360 <set_arm_clock+0x214>
	}

	return frequency;
}
    1366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    136a:	4673      	mov	r3, lr
    136c:	e762      	b.n	1234 <set_arm_clock+0xe8>
    136e:	2712      	movs	r7, #18
    1370:	e718      	b.n	11a4 <set_arm_clock+0x58>
    1372:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    1376:	2104      	movs	r1, #4
    1378:	e7c5      	b.n	1306 <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    137a:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    137e:	4820      	ldr	r0, [pc, #128]	; (1400 <set_arm_clock+0x2b4>)
    1380:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    1382:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    1384:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    1386:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    138a:	4a27      	ldr	r2, [pc, #156]	; (1428 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    138c:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 1438 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    1390:	fba2 2000 	umull	r2, r0, r2, r0
    1394:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    1396:	4825      	ldr	r0, [pc, #148]	; (142c <set_arm_clock+0x2e0>)
    1398:	2a36      	cmp	r2, #54	; 0x36
    139a:	bf38      	it	cc
    139c:	2236      	movcc	r2, #54	; 0x36
    139e:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    13a2:	ea42 0a0a 	orr.w	sl, r2, sl
    13a6:	e774      	b.n	1292 <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    13a8:	ea4f 248c 	mov.w	r4, ip, lsl #10
    13ac:	2300      	movs	r3, #0
    13ae:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    13b2:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    13b6:	46ac      	mov	ip, r5
    13b8:	e762      	b.n	1280 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    13ba:	461d      	mov	r5, r3
    13bc:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    13c0:	4611      	mov	r1, r2
    13c2:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    13c6:	e713      	b.n	11f0 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    13c8:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    13ca:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    13ce:	4602      	mov	r2, r0
    13d0:	4631      	mov	r1, r6
    13d2:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    13d4:	46e6      	mov	lr, ip
    13d6:	e753      	b.n	1280 <set_arm_clock+0x134>
    13d8:	1f78a400 	.word	0x1f78a400
    13dc:	400fc000 	.word	0x400fc000
    13e0:	40080000 	.word	0x40080000
    13e4:	23c34600 	.word	0x23c34600
    13e8:	004cb223 	.word	0x004cb223
    13ec:	51eb851f 	.word	0x51eb851f
    13f0:	016e3600 	.word	0x016e3600
    13f4:	400d8000 	.word	0x400d8000
    13f8:	80003040 	.word	0x80003040
    13fc:	269fb1ff 	.word	0x269fb1ff
    1400:	005b8d80 	.word	0x005b8d80
    1404:	4df67eff 	.word	0x4df67eff
    1408:	4d3f6400 	.word	0x4d3f6400
    140c:	08f0d17f 	.word	0x08f0d17f
    1410:	2cb4177f 	.word	0x2cb4177f
    1414:	00e5109f 	.word	0x00e5109f
    1418:	431bde83 	.word	0x431bde83
    141c:	2000079c 	.word	0x2000079c
    1420:	20000798 	.word	0x20000798
    1424:	20001270 	.word	0x20001270
    1428:	165e9f81 	.word	0x165e9f81
    142c:	00b71b00 	.word	0x00b71b00
    1430:	8000206c 	.word	0x8000206c
    1434:	8001307f 	.word	0x8001307f
    1438:	80002000 	.word	0x80002000

0000143c <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    143c:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    143e:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    1442:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    1446:	d16d      	bne.n	1524 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    1448:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    144a:	d341      	bcc.n	14d0 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    144c:	f851 3b04 	ldr.w	r3, [r1], #4
    1450:	f840 3b04 	str.w	r3, [r0], #4
    1454:	f851 3b04 	ldr.w	r3, [r1], #4
    1458:	f840 3b04 	str.w	r3, [r0], #4
    145c:	f851 3b04 	ldr.w	r3, [r1], #4
    1460:	f840 3b04 	str.w	r3, [r0], #4
    1464:	f851 3b04 	ldr.w	r3, [r1], #4
    1468:	f840 3b04 	str.w	r3, [r0], #4
    146c:	f851 3b04 	ldr.w	r3, [r1], #4
    1470:	f840 3b04 	str.w	r3, [r0], #4
    1474:	f851 3b04 	ldr.w	r3, [r1], #4
    1478:	f840 3b04 	str.w	r3, [r0], #4
    147c:	f851 3b04 	ldr.w	r3, [r1], #4
    1480:	f840 3b04 	str.w	r3, [r0], #4
    1484:	f851 3b04 	ldr.w	r3, [r1], #4
    1488:	f840 3b04 	str.w	r3, [r0], #4
    148c:	f851 3b04 	ldr.w	r3, [r1], #4
    1490:	f840 3b04 	str.w	r3, [r0], #4
    1494:	f851 3b04 	ldr.w	r3, [r1], #4
    1498:	f840 3b04 	str.w	r3, [r0], #4
    149c:	f851 3b04 	ldr.w	r3, [r1], #4
    14a0:	f840 3b04 	str.w	r3, [r0], #4
    14a4:	f851 3b04 	ldr.w	r3, [r1], #4
    14a8:	f840 3b04 	str.w	r3, [r0], #4
    14ac:	f851 3b04 	ldr.w	r3, [r1], #4
    14b0:	f840 3b04 	str.w	r3, [r0], #4
    14b4:	f851 3b04 	ldr.w	r3, [r1], #4
    14b8:	f840 3b04 	str.w	r3, [r0], #4
    14bc:	f851 3b04 	ldr.w	r3, [r1], #4
    14c0:	f840 3b04 	str.w	r3, [r0], #4
    14c4:	f851 3b04 	ldr.w	r3, [r1], #4
    14c8:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    14cc:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    14ce:	d2bd      	bcs.n	144c <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    14d0:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    14d2:	d311      	bcc.n	14f8 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    14d4:	f851 3b04 	ldr.w	r3, [r1], #4
    14d8:	f840 3b04 	str.w	r3, [r0], #4
    14dc:	f851 3b04 	ldr.w	r3, [r1], #4
    14e0:	f840 3b04 	str.w	r3, [r0], #4
    14e4:	f851 3b04 	ldr.w	r3, [r1], #4
    14e8:	f840 3b04 	str.w	r3, [r0], #4
    14ec:	f851 3b04 	ldr.w	r3, [r1], #4
    14f0:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    14f4:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    14f6:	d2ed      	bcs.n	14d4 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    14f8:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    14fa:	d305      	bcc.n	1508 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    14fc:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    1500:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    1504:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    1506:	d2f9      	bcs.n	14fc <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    1508:	3204      	adds	r2, #4
	beq	.Ldone
    150a:	d008      	beq.n	151e <memcpy+0xe2>

	lsls	r2, r2, #31
    150c:	07d2      	lsls	r2, r2, #31
	itt ne
    150e:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    1510:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    1514:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    1518:	d301      	bcc.n	151e <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    151a:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    151c:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    151e:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    1520:	4770      	bx	lr
    1522:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    1524:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    1526:	d313      	bcc.n	1550 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    1528:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    152a:	d08d      	beq.n	1448 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    152c:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    1530:	d08a      	beq.n	1448 <memcpy+0xc>

	rsb	r3, #4
    1532:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    1536:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    1538:	07db      	lsls	r3, r3, #31
	itt ne
    153a:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    153c:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    1540:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    1544:	d380      	bcc.n	1448 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    1546:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    154a:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    154e:	e77b      	b.n	1448 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    1550:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    1552:	d3d9      	bcc.n	1508 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    1554:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    1556:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    155a:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    155e:	d2f9      	bcs.n	1554 <memcpy+0x118>

	ldrb	r3, [r1]
    1560:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    1562:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    1564:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    1566:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    1568:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    156a:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    156c:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    156e:	4770      	bx	lr

00001570 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    1570:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
{
    1574:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    1576:	4666      	mov	r6, ip
	int i=0, j;
    1578:	2400      	movs	r4, #0
    157a:	e000      	b.n	157e <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    157c:	3401      	adds	r4, #1
		digit = val % radix;
    157e:	fbb0 f5f2 	udiv	r5, r0, r2
    1582:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    1586:	2b09      	cmp	r3, #9
    1588:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    158c:	f103 0330 	add.w	r3, r3, #48	; 0x30
    1590:	fa5f fe8e 	uxtb.w	lr, lr
    1594:	bf98      	it	ls
    1596:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    159a:	4290      	cmp	r0, r2
		val /= radix;
    159c:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    159e:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    15a2:	d2eb      	bcs.n	157c <ultoa+0xc>
	}
	buf[i + 1] = 0;
    15a4:	1c63      	adds	r3, r4, #1
    15a6:	2200      	movs	r2, #0
    15a8:	18c8      	adds	r0, r1, r3
    15aa:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    15ac:	b17c      	cbz	r4, 15ce <ultoa+0x5e>
		t = buf[j];
    15ae:	4662      	mov	r2, ip
    15b0:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    15b4:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    15b8:	eba1 030c 	sub.w	r3, r1, ip
    15bc:	3202      	adds	r2, #2
		buf[j] = buf[i];
    15be:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    15c2:	3b01      	subs	r3, #1
    15c4:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    15c6:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    15c8:	4423      	add	r3, r4
    15ca:	429a      	cmp	r2, r3
    15cc:	dbef      	blt.n	15ae <ultoa+0x3e>
	}
	return buf;
}
    15ce:	4608      	mov	r0, r1
    15d0:	bd70      	pop	{r4, r5, r6, pc}
    15d2:	bf00      	nop

000015d4 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    15d4:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    15d6:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    15d8:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    15dc:	4619      	mov	r1, r3
{
    15de:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    15e0:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    15e4:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    15e8:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    15ec:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    15f0:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    15f4:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    15f6:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    15fa:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    15fe:	b29b      	uxth	r3, r3
    1600:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    1604:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1608:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    160c:	3101      	adds	r1, #1
    160e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    1612:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1614:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1616:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    161a:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    161c:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    161e:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    1620:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    1622:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    1626:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    1628:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    162a:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    162c:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    162e:	d1eb      	bne.n	1608 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    1630:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    1634:	b29b      	uxth	r3, r3
    1636:	f043 030f 	orr.w	r3, r3, #15
    163a:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    163e:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    1642:	b29b      	uxth	r3, r3
    1644:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    1648:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    164c:	bd10      	pop	{r4, pc}
    164e:	bf00      	nop

00001650 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    1650:	4b37      	ldr	r3, [pc, #220]	; (1730 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1652:	4a38      	ldr	r2, [pc, #224]	; (1734 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    1654:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    1656:	4838      	ldr	r0, [pc, #224]	; (1738 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    1658:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    165c:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    165e:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1660:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1664:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1668:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    166c:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    1670:	430a      	orrs	r2, r1
    1672:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    1676:	f7ff ffad 	bl	15d4 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    167a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    167e:	f7ff ffa9 	bl	15d4 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    1682:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    1686:	f7ff ffa5 	bl	15d4 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    168a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    168e:	f7ff ffa1 	bl	15d4 <flexpwm_init>
	for (i=0; i < 4; i++) {
    1692:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    1694:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1698:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    169c:	4611      	mov	r1, r2
    169e:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    16a2:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    16a6:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    16a8:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    16aa:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    16ac:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    16ae:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    16b2:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    16b4:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    16b6:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    16ba:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    16bc:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    16be:	d1ee      	bne.n	169e <pwm_init+0x4e>
    16c0:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    16c2:	481e      	ldr	r0, [pc, #120]	; (173c <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    16c4:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    16c8:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    16cc:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    16ce:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    16d2:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    16d6:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    16da:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    16de:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    16e0:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    16e2:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    16e4:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    16e6:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    16ea:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    16ec:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    16ee:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    16f2:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    16f4:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    16f6:	d1ee      	bne.n	16d6 <pwm_init+0x86>
    16f8:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    16fa:	4811      	ldr	r0, [pc, #68]	; (1740 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    16fc:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    16fe:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    1702:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1704:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1708:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    170c:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    1710:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    1714:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    1716:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    1718:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    171a:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    171c:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    171e:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1720:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    1722:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    1726:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1728:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    172c:	d1ee      	bne.n	170c <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    172e:	bd70      	pop	{r4, r5, r6, pc}
    1730:	400fc000 	.word	0x400fc000
    1734:	fc030000 	.word	0xfc030000
    1738:	403dc000 	.word	0x403dc000
    173c:	401e0000 	.word	0x401e0000
    1740:	401e4000 	.word	0x401e4000

00001744 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    1744:	4a07      	ldr	r2, [pc, #28]	; (1764 <rtc_get+0x20>)
    1746:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    1748:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    174a:	4619      	mov	r1, r3
    174c:	4684      	mov	ip, r0
    174e:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    1750:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    1752:	4299      	cmp	r1, r3
    1754:	d1f9      	bne.n	174a <rtc_get+0x6>
    1756:	4584      	cmp	ip, r0
    1758:	d1f7      	bne.n	174a <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    175a:	0bdb      	lsrs	r3, r3, #15
}
    175c:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    1760:	4770      	bx	lr
    1762:	bf00      	nop
    1764:	400d4000 	.word	0x400d4000

00001768 <sm_align_pool>:
{
    1768:	b508      	push	{r3, lr}
	x = spool->pool_size % HEADER_SZ;
    176a:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    176e:	b15b      	cbz	r3, 1788 <sm_align_pool+0x20>
    1770:	b1ba      	cbz	r2, 17a2 <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    1772:	4b0f      	ldr	r3, [pc, #60]	; (17b0 <sm_align_pool+0x48>)
    1774:	fba3 1302 	umull	r1, r3, r3, r2
    1778:	08db      	lsrs	r3, r3, #3
    177a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    177e:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    1782:	d10a      	bne.n	179a <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    1784:	2001      	movs	r0, #1
}
    1786:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    1788:	4b09      	ldr	r3, [pc, #36]	; (17b0 <sm_align_pool+0x48>)
    178a:	fba3 1302 	umull	r1, r3, r3, r2
    178e:	08db      	lsrs	r3, r3, #3
    1790:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    1794:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    1798:	d001      	beq.n	179e <sm_align_pool+0x36>
    179a:	1ad2      	subs	r2, r2, r3
    179c:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    179e:	2af0      	cmp	r2, #240	; 0xf0
    17a0:	d8f0      	bhi.n	1784 <sm_align_pool+0x1c>
		errno = ENOSPC;
    17a2:	f000 f89b 	bl	18dc <__errno>
    17a6:	221c      	movs	r2, #28
    17a8:	4603      	mov	r3, r0
    17aa:	2000      	movs	r0, #0
    17ac:	601a      	str	r2, [r3, #0]
}
    17ae:	bd08      	pop	{r3, pc}
    17b0:	aaaaaaab 	.word	0xaaaaaaab

000017b4 <sm_set_pool>:
{
    17b4:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    17b6:	4604      	mov	r4, r0
    17b8:	b338      	cbz	r0, 180a <sm_set_pool+0x56>
	if (!new_pool || !new_pool_size) {
    17ba:	b119      	cbz	r1, 17c4 <sm_set_pool+0x10>
    17bc:	fab2 f682 	clz	r6, r2
    17c0:	0976      	lsrs	r6, r6, #5
    17c2:	b9a2      	cbnz	r2, 17ee <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    17c4:	6820      	ldr	r0, [r4, #0]
    17c6:	b300      	cbz	r0, 180a <sm_set_pool+0x56>
    17c8:	6862      	ldr	r2, [r4, #4]
    17ca:	b1f2      	cbz	r2, 180a <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    17cc:	4b18      	ldr	r3, [pc, #96]	; (1830 <sm_set_pool+0x7c>)
    17ce:	4919      	ldr	r1, [pc, #100]	; (1834 <sm_set_pool+0x80>)
    17d0:	fb02 f303 	mul.w	r3, r2, r3
    17d4:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    17d8:	d317      	bcc.n	180a <sm_set_pool+0x56>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    17da:	68a3      	ldr	r3, [r4, #8]
    17dc:	b9e3      	cbnz	r3, 1818 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    17de:	2200      	movs	r2, #0
			return 1;
    17e0:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    17e2:	6022      	str	r2, [r4, #0]
    17e4:	6062      	str	r2, [r4, #4]
    17e6:	60a2      	str	r2, [r4, #8]
    17e8:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    17ea:	4618      	mov	r0, r3
    17ec:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    17ee:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    17f0:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    17f2:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    17f6:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    17f8:	f7ff ffb6 	bl	1768 <sm_align_pool>
    17fc:	4603      	mov	r3, r0
    17fe:	2800      	cmp	r0, #0
    1800:	d0f3      	beq.n	17ea <sm_set_pool+0x36>
	if (do_zero) {
    1802:	b96d      	cbnz	r5, 1820 <sm_set_pool+0x6c>
	return 1;
    1804:	2301      	movs	r3, #1
}
    1806:	4618      	mov	r0, r3
    1808:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    180a:	f000 f867 	bl	18dc <__errno>
    180e:	2216      	movs	r2, #22
		return 0;
    1810:	2300      	movs	r3, #0
		errno = EINVAL;
    1812:	6002      	str	r2, [r0, #0]
}
    1814:	4618      	mov	r0, r3
    1816:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    1818:	2100      	movs	r1, #0
    181a:	f000 f80d 	bl	1838 <memset>
    181e:	e7de      	b.n	17de <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    1820:	6862      	ldr	r2, [r4, #4]
    1822:	4631      	mov	r1, r6
    1824:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    1826:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    1828:	f000 f806 	bl	1838 <memset>
	return 1;
    182c:	2301      	movs	r3, #1
    182e:	e7dc      	b.n	17ea <sm_set_pool+0x36>
    1830:	aaaaaaab 	.word	0xaaaaaaab
    1834:	15555555 	.word	0x15555555

00001838 <memset>:
    1838:	0783      	lsls	r3, r0, #30
    183a:	b530      	push	{r4, r5, lr}
    183c:	d048      	beq.n	18d0 <memset+0x98>
    183e:	1e54      	subs	r4, r2, #1
    1840:	2a00      	cmp	r2, #0
    1842:	d03f      	beq.n	18c4 <memset+0x8c>
    1844:	b2ca      	uxtb	r2, r1
    1846:	4603      	mov	r3, r0
    1848:	e001      	b.n	184e <memset+0x16>
    184a:	3c01      	subs	r4, #1
    184c:	d33a      	bcc.n	18c4 <memset+0x8c>
    184e:	f803 2b01 	strb.w	r2, [r3], #1
    1852:	079d      	lsls	r5, r3, #30
    1854:	d1f9      	bne.n	184a <memset+0x12>
    1856:	2c03      	cmp	r4, #3
    1858:	d92d      	bls.n	18b6 <memset+0x7e>
    185a:	b2cd      	uxtb	r5, r1
    185c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    1860:	2c0f      	cmp	r4, #15
    1862:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    1866:	d936      	bls.n	18d6 <memset+0x9e>
    1868:	f1a4 0210 	sub.w	r2, r4, #16
    186c:	f022 0c0f 	bic.w	ip, r2, #15
    1870:	f103 0e20 	add.w	lr, r3, #32
    1874:	44e6      	add	lr, ip
    1876:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    187a:	f103 0210 	add.w	r2, r3, #16
    187e:	e942 5504 	strd	r5, r5, [r2, #-16]
    1882:	e942 5502 	strd	r5, r5, [r2, #-8]
    1886:	3210      	adds	r2, #16
    1888:	4572      	cmp	r2, lr
    188a:	d1f8      	bne.n	187e <memset+0x46>
    188c:	f10c 0201 	add.w	r2, ip, #1
    1890:	f014 0f0c 	tst.w	r4, #12
    1894:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    1898:	f004 0c0f 	and.w	ip, r4, #15
    189c:	d013      	beq.n	18c6 <memset+0x8e>
    189e:	f1ac 0304 	sub.w	r3, ip, #4
    18a2:	f023 0303 	bic.w	r3, r3, #3
    18a6:	3304      	adds	r3, #4
    18a8:	4413      	add	r3, r2
    18aa:	f842 5b04 	str.w	r5, [r2], #4
    18ae:	4293      	cmp	r3, r2
    18b0:	d1fb      	bne.n	18aa <memset+0x72>
    18b2:	f00c 0403 	and.w	r4, ip, #3
    18b6:	b12c      	cbz	r4, 18c4 <memset+0x8c>
    18b8:	b2c9      	uxtb	r1, r1
    18ba:	441c      	add	r4, r3
    18bc:	f803 1b01 	strb.w	r1, [r3], #1
    18c0:	429c      	cmp	r4, r3
    18c2:	d1fb      	bne.n	18bc <memset+0x84>
    18c4:	bd30      	pop	{r4, r5, pc}
    18c6:	4664      	mov	r4, ip
    18c8:	4613      	mov	r3, r2
    18ca:	2c00      	cmp	r4, #0
    18cc:	d1f4      	bne.n	18b8 <memset+0x80>
    18ce:	e7f9      	b.n	18c4 <memset+0x8c>
    18d0:	4603      	mov	r3, r0
    18d2:	4614      	mov	r4, r2
    18d4:	e7bf      	b.n	1856 <memset+0x1e>
    18d6:	461a      	mov	r2, r3
    18d8:	46a4      	mov	ip, r4
    18da:	e7e0      	b.n	189e <memset+0x66>

000018dc <__errno>:
    18dc:	4b01      	ldr	r3, [pc, #4]	; (18e4 <__errno+0x8>)
    18de:	6818      	ldr	r0, [r3, #0]
    18e0:	4770      	bx	lr
    18e2:	bf00      	nop
    18e4:	200007a0 	.word	0x200007a0

000018e8 <__libc_init_array>:
    18e8:	b570      	push	{r4, r5, r6, lr}
    18ea:	4e0d      	ldr	r6, [pc, #52]	; (1920 <__libc_init_array+0x38>)
    18ec:	4d0d      	ldr	r5, [pc, #52]	; (1924 <__libc_init_array+0x3c>)
    18ee:	1b76      	subs	r6, r6, r5
    18f0:	10b6      	asrs	r6, r6, #2
    18f2:	d006      	beq.n	1902 <__libc_init_array+0x1a>
    18f4:	2400      	movs	r4, #0
    18f6:	f855 3b04 	ldr.w	r3, [r5], #4
    18fa:	3401      	adds	r4, #1
    18fc:	4798      	blx	r3
    18fe:	42a6      	cmp	r6, r4
    1900:	d1f9      	bne.n	18f6 <__libc_init_array+0xe>
    1902:	4e09      	ldr	r6, [pc, #36]	; (1928 <__libc_init_array+0x40>)
    1904:	4d09      	ldr	r5, [pc, #36]	; (192c <__libc_init_array+0x44>)
    1906:	1b76      	subs	r6, r6, r5
    1908:	f000 f816 	bl	1938 <___init_veneer>
    190c:	10b6      	asrs	r6, r6, #2
    190e:	d006      	beq.n	191e <__libc_init_array+0x36>
    1910:	2400      	movs	r4, #0
    1912:	f855 3b04 	ldr.w	r3, [r5], #4
    1916:	3401      	adds	r4, #1
    1918:	4798      	blx	r3
    191a:	42a6      	cmp	r6, r4
    191c:	d1f9      	bne.n	1912 <__libc_init_array+0x2a>
    191e:	bd70      	pop	{r4, r5, r6, pc}
    1920:	60001e80 	.word	0x60001e80
    1924:	60001e80 	.word	0x60001e80
    1928:	60001e84 	.word	0x60001e84
    192c:	60001e80 	.word	0x60001e80

00001930 <___reboot_Teensyduino__veneer>:
    1930:	f85f f000 	ldr.w	pc, [pc]	; 1934 <___reboot_Teensyduino__veneer+0x4>
    1934:	60001d8d 	.word	0x60001d8d

00001938 <___init_veneer>:
    1938:	f85f f000 	ldr.w	pc, [pc]	; 193c <___init_veneer+0x4>
    193c:	60001e35 	.word	0x60001e35

Disassembly of section .fini:

00001940 <_fini>:
    1940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1942:	bf00      	nop
